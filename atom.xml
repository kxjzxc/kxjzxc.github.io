<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kerke&#39;s Eden</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kxjzxc.github.io/"/>
  <updated>2021-07-10T11:27:48.881Z</updated>
  <id>http://kxjzxc.github.io/</id>
  
  <author>
    <name>Kermit</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于CMAKE项目生成多个可执行文件以及调用第三方库这件事</title>
    <link href="http://kxjzxc.github.io/%E5%85%B3%E4%BA%8ECMAKE%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90%E5%A4%9A%E4%B8%AA%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E8%B0%83%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E8%BF%99%E4%BB%B6%E4%BA%8B.html"/>
    <id>http://kxjzxc.github.io/关于CMAKE项目生成多个可执行文件以及调用第三方库这件事.html</id>
    <published>2021-07-10T03:54:33.000Z</published>
    <updated>2021-07-10T11:27:48.881Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ol><li>CMake工程中多个cpp文件分别生成exe可执行文件</li><li>调用第三方静态和动态库</li></ol><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>先上CMakeLists.txt吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required (VERSION 3.10)</span><br><span class="line">project(Mosquitto)</span><br><span class="line"># specify the C++ standard</span><br><span class="line">set(CMAKE_CXX_STANDARD 11)</span><br><span class="line">set(CMAKE_CXX_STANDARD_REQUIRED True)</span><br><span class="line"></span><br><span class="line">set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -g&quot;)</span><br><span class="line"></span><br><span class="line"># 设置变量</span><br><span class="line">set(Mosquitto_DLL_DIR D:\\Program_Files\\Mosquitto)</span><br><span class="line">set(Mosquitto_DIR D:\\Program_Files\\Mosquitto\\devel)</span><br><span class="line">set(CMAKE_RUNTIME_OUTPUT_DIRECTORY $&#123;CMAKE_BINARY_DIR&#125;)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 生成时拷贝dll到Bin中</span><br><span class="line">file(GLOB dll_src &quot;$&#123;Mosquitto_DLL_DIR&#125;/*.dll&quot; )</span><br><span class="line">file(COPY $&#123;dll_src&#125; DESTINATION $&#123;CMAKE_RUNTIME_OUTPUT_DIRECTORY&#125;)</span><br><span class="line"></span><br><span class="line"># find_package(OpenCV  REQUIRED) 如果第三方库里有.cmake文件可以直接调用find_package找路径</span><br><span class="line"># 头文件目录</span><br><span class="line">include_directories($&#123;Mosquitto_DIR&#125;)</span><br><span class="line"></span><br><span class="line"># 库目录</span><br><span class="line">link_directories(</span><br><span class="line">    $&#123;Mosquitto_DIR&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 找到所有含有mian函数的cpp文件，保存在mians里</span><br><span class="line">file(</span><br><span class="line">    GLOB_RECURSE mains RELATIVE &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&quot;</span><br><span class="line">    &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/subscribe.cpp&quot;</span><br><span class="line">    &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/publish.cpp&quot;</span><br><span class="line">)</span><br><span class="line"># 循环遍历每个含main的文件，分别编译生成exe文件</span><br><span class="line">foreach(mainfile IN LISTS mains)</span><br><span class="line">    # Get file name without directory</span><br><span class="line">    get_filename_component(mainname $&#123;mainfile&#125; NAME_WE)</span><br><span class="line">    add_executable($&#123;mainname&#125; $&#123;mainfile&#125;)</span><br><span class="line">    # 添加库文件目录</span><br><span class="line">    target_link_libraries($&#123;mainname&#125; mosquitto mosquittopp)# 链接库文件</span><br><span class="line">endforeach()</span><br></pre></td></tr></table></figure><ol><li>关于生成多个可执行文件<br>主要就是对于每个cpp分别进行操作，链接库之类的<br>我Cmake里使用了<code>file</code>和<code>foreach</code>，可以减少行数。</li><li>关于调用第三方库<br>代码中注释也说了，如果第三方库里有.cmake文件可以直接调用<code>find_package</code>找路径，具体可以打开.cmake文件看看<br>如果没有的话就需要自己也用<code>set</code>设置路径变量<br>一般来说用<code>link_directories</code>、<code>target_link_libraries</code>就能够链接库文件了。<br>但我出现了以下问题<br><img src="/关于CMAKE项目生成多个可执行文件以及调用第三方库这件事/bug1.png" alt="bug"><br>通过网上查询资料，猜测是没找到dll文件的位置。<br>此时需要将dll添加到build文件夹里，详情见cmakelists文件。<br>理论上添加环境变量也是可以的，但是我并没有成功，原因未知。</li></ol><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>说实话，到最后CMakeLists还是一头雾水，莫名其妙地成功了，很多东西都是囫囵吞枣，能用就不深究，这样属实不行，将来必然吃亏。有时间还是得多多了解多多写。</p>]]></content>
    
    <summary type="html">
    
       
    
    </summary>
    
      <category term="教程" scheme="http://kxjzxc.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://kxjzxc.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="CMake" scheme="http://kxjzxc.github.io/tags/CMake/"/>
    
  </entry>
  
  <entry>
    <title>关于不同仓库部署到同一个Github这件事</title>
    <link href="http://kxjzxc.github.io/%E5%85%B3%E4%BA%8E%E4%B8%8D%E5%90%8C%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2%E5%88%B0%E5%90%8C%E4%B8%80%E4%B8%AAGithub%E8%BF%99%E4%BB%B6%E4%BA%8B.html"/>
    <id>http://kxjzxc.github.io/关于不同仓库部署到同一个Github这件事.html</id>
    <published>2021-07-09T16:18:33.000Z</published>
    <updated>2021-07-10T02:52:40.733Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直以来，我做出来的web小项目，如<a href="https://kxjzxc.github.io/web/kxj-s-first-website-%E6%94%B9/kxj&#39;s%20first%20website%E6%94%B9.html">我的第一个网站</a>、<a href="https://kxjzxc.github.io/web/%E8%B4%AA%E5%90%83%E8%9B%87/snake.html">贪吃蛇</a>等都是直接塞到博客里和博客一起上传到网站，但是上传<a href="https://kxjzxc.github.io/%E5%9F%BA%E4%BA%8EVue%E7%9A%84%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E7%BD%91%E7%AB%99.html">上一篇博文</a>时，发现即使跳过渲染，js文件在<code>hexo g</code>之后还是会出问题，研究了半天猜测是我之前安装的aplayer插件引起的bug，因为在js文件前总会出现这样几行代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">class</span>=<span class="string">"aplayer-secondary-style-marker"</span> <span class="attr">href</span>=<span class="string">"\assets\css\APlayer.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"\assets\js\APlayer.min.js"</span> <span class="attr">class</span>=<span class="string">"aplayer-secondary-script-marker"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">class</span>=<span class="string">"meting-secondary-script-marker"</span> <span class="attr">src</span>=<span class="string">"\assets\js\Meting.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后索性改变策略，将Vue项目上传到一个新的仓库，然后部署到kxjzxc.github.io的子网站<a href="https://kxjzxc.github.io/Vue-Image-tool/">kxjzxc.gitub.io/Vue-Image-tool</a>上</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>关于Github Pages这里就不赘述了，仅仅谈论对于一个已经有一个博客或者个人网站的人怎么部署。</p><ol><li>点击新仓库的Setting<br><img src="/关于不同仓库部署到同一个Github这件事/1.png" alt="Setting位置"></li><li>选择pages选项<br><img src="/关于不同仓库部署到同一个Github这件事/2.png" alt="pages位置"></li><li>选择分支并点击Save<br>关于这一步，选择的分支的根目录下必须有且只有你想要显示的页面的html或者md文件。如果你的仓库包括源文件和最后编译生成的文件，建议将这两部分分到两个分支中<br><img src="/关于不同仓库部署到同一个Github这件事/3.png" alt="选择分支"></li></ol><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>其实搞完后发现以前我朋友帮我搞过这种操作，就是<a href="https://kxjzxc.github.io/adarkroom">adarkroom</a>和<a href="https://kxjzxc.github.io/candybox">candybox</a>这两个网站，可惜我当时并没有问他咋搞的。</p>]]></content>
    
    <summary type="html">
    
       
    
    </summary>
    
      <category term="教程" scheme="http://kxjzxc.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Github" scheme="http://kxjzxc.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>基于Vue的图片处理网站</title>
    <link href="http://kxjzxc.github.io/%E5%9F%BA%E4%BA%8EVue%E7%9A%84%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E7%BD%91%E7%AB%99.html"/>
    <id>http://kxjzxc.github.io/基于Vue的图片处理网站.html</id>
    <published>2021-07-05T15:17:26.000Z</published>
    <updated>2021-07-09T15:58:47.939Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很早之前看过某位大佬制作的<a href="https://lab.magiconch.com/vaporwave/" target="_blank" rel="noopener">蒸汽波图片生成网站</a>，无论是网站的功能还是风格都深得我意，于是就Ctrl+S保存了这个网站的代码（后来发现作者在<a href="https://github.com/itorr/vaporwave" target="_blank" rel="noopener">GitHub</a>上开源了）。由于时间原因，我一直没怎么去看这份代码。正好最近前段时间刚考完期末，公司实习又恰好顺延，再加上我一直想学习学习Vue-Cli手脚架的使用，所以就打算套用Vue-Cli实现一遍这份代码。<br>代码本身这篇博客就不讲解了，毕竟不是我的代码。所以在这里我主要想谈谈在复刻网站的过程中我觉得有必要记录下来的知识点。</p><h1 id="Vue知识点集合"><a href="#Vue知识点集合" class="headerlink" title="Vue知识点集合"></a>Vue知识点集合</h1><h2 id="Vue-Cli环境搭建以及项目生成"><a href="#Vue-Cli环境搭建以及项目生成" class="headerlink" title="Vue-Cli环境搭建以及项目生成"></a>Vue-Cli环境搭建以及项目生成</h2><p>在使用Vue-Cli之前需要先安装node.js以及npm等环境或者工具，此处不赘述，从Cli手脚架讲起。<del>好吧，我之前就装过环境了，所以不想讲</del><br><a href="https://cli.vuejs.org/zh/guide/installation.html" target="_blank" rel="noopener">官方教程</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>然后用以下指令创建项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create hello-world</span><br></pre></td></tr></table></figure><p>官方还提供了图形化界面来调试管理</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>在图像化界面中可以对项目进行编译、热更新、压缩等操作<br><img src="/基于Vue的图片处理网站/图形化界面.png" alt="图形界面"></p><h2 id="Vue-Cli手脚架结构"><a href="#Vue-Cli手脚架结构" class="headerlink" title="Vue-Cli手脚架结构"></a>Vue-Cli手脚架结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├─dist                输出文件夹：build之后生成的文件夹</span><br><span class="line">│  ├─css </span><br><span class="line">│  ├─img</span><br><span class="line">│  └─js</span><br><span class="line">├─ node_modules       node.js中的一些包</span><br><span class="line">├─public              静态文件夹</span><br><span class="line">│  └─img              图片文件夹</span><br><span class="line">└─src                 源码文件夹</span><br><span class="line">    ├─assets          动态资源文件夹</span><br><span class="line">    │  └─css        样式文件夹：用于存放网页的样式文件</span><br><span class="line">    ├─components      组件文件夹：用于存放一些可重复利用的组件</span><br><span class="line">    ├─script          js脚本文件夹：用于存放网站的js脚本</span><br><span class="line">    ├─views           页面文件夹：用于存放单个网页页面的组件 </span><br><span class="line">    ├─App.vue         入口组件</span><br><span class="line">    └─main.js         入口脚本：代码从此处开始</span><br></pre></td></tr></table></figure><h2 id="导入外部js变量或方法"><a href="#导入外部js变量或方法" class="headerlink" title="导入外部js变量或方法"></a>导入外部js变量或方法</h2><p>在外部的extra.js文件最下方导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">variable,</span><br><span class="line">method</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在需要导入的组件vue中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">javascript</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;variable&#125; <span class="keyword">from</span> <span class="string">'../script/extra.js'</span><span class="comment">//导入外部js变量</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;method&#125; <span class="keyword">from</span> <span class="string">'../script/extra.js'</span><span class="comment">//导入外部函数</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Components <span class="keyword">from</span> <span class="string">'../components/components.vue'</span><span class="comment">//导入外部组件</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> </span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'thisVue'</span>,</span></span><br><span class="line"><span class="javascript">    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">    localVar:<span class="string">''</span>,<span class="comment">//本地变量</span></span></span><br><span class="line"><span class="javascript">    variable<span class="comment">//外部变量</span></span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components:&#123;</span></span><br><span class="line"><span class="undefined">      Components,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">        method</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="读取本地图片"><a href="#读取本地图片" class="headerlink" title="读取本地图片"></a>读取本地图片</h2><p>在需要的组件中调用以下js脚本中的chooseImage函数，其中参数callback是用于在需要的组件中赋值读取的图片，因为vue不像原生js那样不同文件中的变量共用。这部分代码，说实话我不太想讲，虽然很有意思，但是js的语法实在……不适合用文字来分析（大概）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readFileToURL = <span class="function">(<span class="params">file,onOver</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">reader.onload = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> src = reader.result;</span><br><span class="line">onOver(src);</span><br><span class="line">&#125;;</span><br><span class="line">reader.readAsDataURL(file);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFileAndSetIMGSrc = <span class="function">(<span class="params">file,callback</span>)=&gt;</span>&#123;</span><br><span class="line">readFileToURL(file,src=&gt;&#123;</span><br><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = src;</span><br><span class="line">img.onload = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">callback(img);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> chooseFile = <span class="function">(<span class="params">callback</span>)=&gt;</span>&#123;</span><br><span class="line">chooseFile.form.reset();</span><br><span class="line">chooseFile.input.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">this</span>.files||!<span class="keyword">this</span>.files[<span class="number">0</span>])<span class="keyword">return</span>;</span><br><span class="line">callback(<span class="keyword">this</span>.files[<span class="number">0</span>]);</span><br><span class="line">&#125;;</span><br><span class="line">chooseFile.input.click();</span><br><span class="line">&#125;;</span><br><span class="line">chooseFile.form = <span class="built_in">document</span>.createElement(<span class="string">'form'</span>);</span><br><span class="line">chooseFile.input = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">chooseFile.input.type = <span class="string">'file'</span>;</span><br><span class="line">chooseFile.form.appendChild(chooseFile.input);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chooseImage = <span class="function">(<span class="params">callback</span>)=&gt;</span> &#123;</span><br><span class="line">chooseFile(<span class="function"><span class="params">file</span>=&gt;</span>&#123;</span><br><span class="line">readFileAndSetIMGSrc(file,callback);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    chooseImage</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加载图片资源"><a href="#加载图片资源" class="headerlink" title="加载图片资源"></a>加载图片资源</h2><p>加载本地图片资源有两种方法，第一种动态加载，第二种是静态加载</p><h3 id="动态加载"><a href="#动态加载" class="headerlink" title="动态加载"></a>动态加载</h3><p>动态加载就是将图片资源放在src/assets文件夹中。由于vue在编译的时候会用webpack将src下的所有东西转换成base64，所以不能直接通过路径来导入图片，需要使用<code>require</code>来以模块的形式导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"@/"</span>+path);</span><br></pre></td></tr></table></figure><p><code>@/</code>是src根目录，path就是剩下的路径</p><h3 id="静态加载"><a href="#静态加载" class="headerlink" title="静态加载"></a>静态加载</h3><p>静态加载则是将图片资源放在public静态文件夹中，由于打包时静态目录下的东西是原封不动地移到输出目录中，所以直接用public文件夹下的路径，比如<code>/public/img/*.jpg</code>，导入时路径为<code>/img/*jpg</code>。在打包时，比起动态加载我更倾向于用这个方法来导入图片，因为打包后src下的东西都乱作一团，难以导入图片（可能是我写得不对），而静态目录不受影响。但显而易见的是，调试的时候用动态加载会方便很多。</p><h2 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h2><p>父子间通信网络上有很多很多的教程，而且大同小异，我也不赘述了。<br>不过网上的方法基本上都是从父组件传值到子组件，子组件里修改了的话需要再传到父组件，这时候父组件需要写一个函数来更新这个值，而我一开始想要的并不是这种方法，而是类似于C/C++那种引用或者原生js里的变量通用，即在子组件里修改了某个值，父组件里的那个值也改变，但很可惜能力有限，并没有找到解决方案，最后还是放弃了这个想法。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>最终做出来的成品与原网站不能说很像，只能说一模一样。好吧，其实我还是修改了样式<del>改得更丑了</del>，以及换了图片（不如原先）。<br>其实我是想要在此基础上制作一个拥有更多功能得图像处理网站，不过短暂的假期（就当是假期吧）结束了，我得去实习了<del>其实还有考研</del>，所以就留给下个假期了吧。<br>顺带一提，虽然我之前说这不是我的代码，但图像处理的部分也着实有趣，有时间还是想写一写这一部分的解析。</p><p>最后是我的成品，如有bug欢迎提出。<br><a href="https://kxjzxc.github.io/Vue-Image-tool/">图片处理网站</a></p>]]></content>
    
    <summary type="html">
    
       
    
    </summary>
    
      <category term="前端" scheme="http://kxjzxc.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://kxjzxc.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://kxjzxc.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>基于OpenCV和图像金字塔的模板匹配——火花塞间隙尺寸测量</title>
    <link href="http://kxjzxc.github.io/%E5%9F%BA%E4%BA%8EOpenCV%E5%92%8C%E5%9B%BE%E5%83%8F%E9%87%91%E5%AD%97%E5%A1%94%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%8C%B9%E9%85%8D%E2%80%94%E2%80%94%E7%81%AB%E8%8A%B1%E5%A1%9E%E9%97%B4%E9%9A%99%E5%B0%BA%E5%AF%B8%E6%B5%8B%E9%87%8F.html"/>
    <id>http://kxjzxc.github.io/基于OpenCV和图像金字塔的模板匹配——火花塞间隙尺寸测量.html</id>
    <published>2021-06-27T13:42:32.000Z</published>
    <updated>2021-06-27T14:40:10.059Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>本项目为基于OpenCV的火花塞间隙尺寸测量，主要是运用模板匹配技术定位火花塞间隙尺寸，然后寻找火花塞间隙并测量其尺寸。</p><h1 id="算法说明"><a href="#算法说明" class="headerlink" title="算法说明"></a>算法说明</h1><p><img src="/基于OpenCV和图像金字塔的模板匹配——火花塞间隙尺寸测量/流程图.png" alt="流程图"><br>程序主要分成四个部分：</p><h2 id="预处理："><a href="#预处理：" class="headerlink" title="预处理："></a>预处理：</h2><p>在此部分中，将完成模板的创建和待处理图片的路径读取。程序将从文件夹中读取model.png图片作为模板。如果文件夹中没有该图片，则将从第一张待处理图片中截取所需区域作为模板。</p><h2 id="匹配："><a href="#匹配：" class="headerlink" title="匹配："></a>匹配：</h2><p>此函数主要调用OpenCV库中的matchTemplate函数以及相关函数寻找各种角度的图片中与模板的最佳匹配点，并且根据该点找寻区域的中心位置。模板匹配算法根据需要决定，本项目使用平均方差。</p><h3 id="旋转图像"><a href="#旋转图像" class="headerlink" title="旋转图像"></a>旋转图像</h3><p>为了匹配旋转的图像，所以在匹配时要将图像进行旋转。<br>旋转使用的是仿射变换，仿射矩阵可用getRotationMatrix2D()得到M1。<br>由于在旋转图像后，图像的大小也会改变，所以不能直接使用M1进行变换，而是要用getAffineTransform()函数再获得一个大小变换矩阵M2<br>最后将M1的旋转部分和M2的大小变换部分相结合变成一个新的变换矩阵M，使用warpAffine()函数就能完成图像的仿射变换。<br>由于代码需要，还需要写坐标变换的函数，公式如下<br><img src="/基于OpenCV和图像金字塔的模板匹配——火花塞间隙尺寸测量/仿射变换.png" alt="仿射变换"><br>M就是一个3*2的矩阵</p><h3 id="图像金字塔"><a href="#图像金字塔" class="headerlink" title="图像金字塔"></a>图像金字塔</h3><p>如果单纯使用模板匹配，时间复杂度将爆炸，但我们可以使用图像金字塔来进行优化</p><ol><li><p>建立n层图像金字塔，对于每一层金字塔，将图像向下采样，每$2^n$行$2^n$列取一个像素。由此获得$\frac{1}{2^n}$倍的图像和模板。采样完后的图像可用高斯滤波器滤波（本项目没有）</p></li><li><p>从高层开始将该层模板对该层图像进行模板匹配，所有匹配度高于某一阈值的点都将用一个矩形框住，并记录下旋转角度变换范围。</p></li><li><p>下一层在上一层截取的区域和角度中进行模板匹配，依次类推逐渐获得一个比较小的匹配区域和角度范围。</p></li><li><p>对n-1层图像金字塔依次进行匹配后，在源图像中找到得到的区域，并在相应角度范围中进行最终的模板匹配，获得中心点的位置。</p></li></ol><h2 id="尺寸计算："><a href="#尺寸计算：" class="headerlink" title="尺寸计算："></a>尺寸计算：</h2><p>当找到匹配区域的中心点位置后，垂直向下寻找火花塞间隙。将图片变换成灰度图之后，就可以发现向下直线上的两处灰度值突变的点便是间隙边缘上的点，计算两点间距离就是火花塞间隙的开度。</p><h2 id="绘制输出"><a href="#绘制输出" class="headerlink" title="绘制输出"></a>绘制输出</h2><p>测量处相关函数之后就可以在图片上绘制测量区域，并且显示开度的数值</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">////////////其他函数///////////////</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Min</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)a = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b)a = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">GetCenter</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w,<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Point(x+w/<span class="number">2</span>,y+h/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">获取仿射矩阵</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Mat <span class="title">GetMatrix</span><span class="params">(<span class="keyword">int</span> cols,<span class="keyword">int</span> rows,<span class="keyword">int</span> newCols,<span class="keyword">int</span> newRows,<span class="keyword">int</span> degree)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="function">Point2f <span class="title">center</span><span class="params">(cols / <span class="number">2</span>, rows/<span class="number">2</span>)</span></span>;<span class="comment">//中心</span></span><br><span class="line">Mat M1 = getRotationMatrix2D(center, degree, <span class="number">1</span>);<span class="comment">//计算旋转的仿射变换矩阵 </span></span><br><span class="line">Point2f srcPoints1[<span class="number">3</span>];</span><br><span class="line">Point2f dstPoints1[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">srcPoints1[<span class="number">0</span>] = Point2i(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">srcPoints1[<span class="number">1</span>] = Point2i(<span class="number">0</span>, rows);</span><br><span class="line">srcPoints1[<span class="number">2</span>] = Point2i(cols, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">dstPoints1[<span class="number">0</span>] = Point2i((newCols - cols)/<span class="number">2</span> , (newRows - rows)/<span class="number">2</span>);</span><br><span class="line">dstPoints1[<span class="number">1</span>] = Point2i((newCols - cols)/<span class="number">2</span> , (newRows + rows)/<span class="number">2</span>);</span><br><span class="line">dstPoints1[<span class="number">2</span>] = Point2i((newCols + cols)/<span class="number">2</span>, (newRows - rows)/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">Mat M2 = getAffineTransform(srcPoints1, dstPoints1);</span><br><span class="line">M1.at&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>, <span class="number">2</span>) = M1.at&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>, <span class="number">2</span>) + M2.at&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">M1.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>, <span class="number">2</span>) = M1.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>, <span class="number">2</span>) + M2.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> M1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//旋转图像内容不变，尺寸相应变大  </span></span><br><span class="line"><span class="function">Mat <span class="title">Rotate</span><span class="params">(Mat src, <span class="keyword">int</span> degree)</span>    </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">double</span> angle = degree  * CV_PI / <span class="number">180.</span>;   </span><br><span class="line">    <span class="keyword">double</span> a = <span class="built_in">sin</span>(angle), b = <span class="built_in">cos</span>(angle);   </span><br><span class="line">    <span class="keyword">int</span> rows=src.rows;</span><br><span class="line">    <span class="keyword">int</span> cols=src.cols;  </span><br><span class="line">    <span class="comment">//旋转后的新图尺寸  </span></span><br><span class="line">    <span class="keyword">int</span> width_rotate= <span class="keyword">int</span>(rows * <span class="built_in">fabs</span>(a) + cols * <span class="built_in">fabs</span>(b));    </span><br><span class="line">    <span class="keyword">int</span> height_rotate=<span class="keyword">int</span>(cols * <span class="built_in">fabs</span>(a) + rows * <span class="built_in">fabs</span>(b));    </span><br><span class="line"></span><br><span class="line">    Mat M = GetMatrix(cols,rows,width_rotate,height_rotate,degree);</span><br><span class="line">    Mat dst= Mat::zeros(width_rotate, height_rotate, src.type());</span><br><span class="line">warpAffine(src, dst, M, Size(width_rotate, height_rotate));<span class="comment">//仿射变换</span></span><br><span class="line">    <span class="keyword">return</span> dst;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    坐标变换</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TransCoor</span><span class="params">(Point &amp;point,<span class="keyword">int</span> degree,<span class="keyword">int</span> rows,<span class="keyword">int</span> cols,<span class="keyword">bool</span> dir = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> angle = degree  * CV_PI / <span class="number">180.</span>;   </span><br><span class="line">    <span class="keyword">double</span> a = <span class="built_in">sin</span>(angle), b = <span class="built_in">cos</span>(angle);  </span><br><span class="line">    <span class="comment">//旋转后的新图尺寸  </span></span><br><span class="line">    <span class="keyword">int</span> width_rotate= <span class="built_in">ceil</span>(rows * <span class="built_in">fabs</span>(a) + cols * <span class="built_in">fabs</span>(b));    </span><br><span class="line">    <span class="keyword">int</span> height_rotate=<span class="built_in">ceil</span>(cols * <span class="built_in">fabs</span>(a) + rows * <span class="built_in">fabs</span>(b));    </span><br><span class="line"></span><br><span class="line">    Mat M;</span><br><span class="line">    <span class="keyword">if</span>(dir == <span class="number">0</span>)<span class="comment">//顺时针</span></span><br><span class="line">    &#123;</span><br><span class="line">         M = GetMatrix(cols,rows,width_rotate,height_rotate,degree);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//逆时针</span></span><br><span class="line">    &#123;</span><br><span class="line">        M = GetMatrix(width_rotate,height_rotate,cols,rows,-degree);</span><br><span class="line">    &#125;</span><br><span class="line">    point = Point(point.x*M.at&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>, <span class="number">0</span>)+point.y*M.at&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>,<span class="number">1</span>)+M.at&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>,<span class="number">2</span>),</span><br><span class="line">                  point.x*M.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>, <span class="number">0</span>)+point.y*M.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>, <span class="number">1</span>)+M.at&lt;<span class="keyword">double</span>&gt;(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> level = <span class="number">3</span>;<span class="comment">//金字塔层级</span></span><br><span class="line"><span class="keyword">int</span> degreeMin,degreeMax;<span class="comment">//旋转范围</span></span><br><span class="line"><span class="keyword">int</span> degree;<span class="comment">//最终的旋转角度</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    在ROI图像中匹配模板model</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Point <span class="title">Match</span><span class="params">(Mat src,Mat model)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Point temLoc;<span class="comment">//最佳匹配点</span></span><br><span class="line">    <span class="keyword">double</span> Min = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d = degreeMin;d&lt;=degreeMax;d++)<span class="comment">//旋转角度</span></span><br><span class="line">    &#123;</span><br><span class="line">        Mat img = Rotate(src,d);</span><br><span class="line">        <span class="keyword">int</span> row = img.rows;</span><br><span class="line">        <span class="keyword">int</span> col = img.cols;</span><br><span class="line">        <span class="function">Mat <span class="title">result</span><span class="params">(col, row, CV_32FC1)</span></span>;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span>(row &lt; model.rows || col &lt; model.cols)<span class="keyword">continue</span>;</span><br><span class="line">        matchTemplate(img, model, result, TM_SQDIFF_NORMED);<span class="comment">//匹配模板</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//normalize(result, result, 0, 1, NORM_MINMAX, -1, Mat());//归一化 </span></span><br><span class="line">        Point minLoc;</span><br><span class="line">        Point maxLoc;</span><br><span class="line">        <span class="keyword">double</span> min, max;</span><br><span class="line">        <span class="comment">//找到最匹配点（函数说明：在一个数组中找到全局最小值和全局最大值）</span></span><br><span class="line">        minMaxLoc(result, &amp;min, &amp;max, &amp;minLoc, &amp;maxLoc, Mat());</span><br><span class="line">        <span class="keyword">if</span>(min&lt;Min)</span><br><span class="line">        &#123;</span><br><span class="line">            temLoc = minLoc;<span class="comment">//TM_SQDIFF_NORMED是最小值</span></span><br><span class="line">            degree = d;<span class="comment">//最佳匹配角度</span></span><br><span class="line">            Min = min;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> GetCenter(temLoc.x, temLoc.y, model.cols, model.rows);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    获得第level层金字塔图像</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Mat <span class="title">GetPyramid</span><span class="params">(Mat src,<span class="keyword">int</span> level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sample = <span class="number">1</span>&lt;&lt;level;<span class="comment">//采样率为2^level</span></span><br><span class="line">    Mat dst = Mat::zeros(Size(src.cols/sample,src.rows/sample),src.type());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dst.rows;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;dst.cols;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dst.at&lt;Vec3b&gt;(i,j) = src.at&lt;Vec3b&gt;(i*sample,j*sample);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    缩小寻找范围</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindROI</span><span class="params">(Mat src,Rect &amp;ROI,<span class="keyword">int</span> level,Mat model)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat pyramidSrc = GetPyramid(src,level);</span><br><span class="line">    Mat pyramidModel = GetPyramid(model,level);</span><br><span class="line"></span><br><span class="line">    Point topLeftP = Point(pyramidSrc.cols,pyramidSrc.rows);</span><br><span class="line">    Point ButtonRightP = Point(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">bool</span> isMatch = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> dmin = <span class="number">359</span>,dmax = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d = degreeMin;d&lt;=degreeMax;d+=<span class="number">10</span>*level)<span class="comment">//旋转角度</span></span><br><span class="line">    &#123;</span><br><span class="line">        Mat img = Rotate(pyramidSrc,d);</span><br><span class="line">        <span class="keyword">int</span> row = img.rows;</span><br><span class="line">        <span class="keyword">int</span> col = img.cols;</span><br><span class="line">        <span class="keyword">if</span>(row &lt; pyramidModel.rows || col &lt; pyramidModel.cols)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="function">Mat <span class="title">result</span><span class="params">(col, row, CV_32FC1)</span></span>;</span><br><span class="line">        matchTemplate(img, pyramidModel, result, TM_SQDIFF_NORMED);<span class="comment">//匹配模板</span></span><br><span class="line"></span><br><span class="line">        Point minLoc;</span><br><span class="line">        Point maxLoc;</span><br><span class="line">        <span class="keyword">double</span> min, max;</span><br><span class="line">        <span class="comment">//找到最匹配点（函数说明：在一个数组中找到全局最小值和全局最大值）</span></span><br><span class="line">        minMaxLoc(result, &amp;min, &amp;max, &amp;minLoc, &amp;maxLoc, Mat());</span><br><span class="line">        <span class="keyword">if</span>(min&lt;<span class="number">0.1</span>*level)</span><br><span class="line">        &#123;</span><br><span class="line">            isMatch = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//匹配到的四个点</span></span><br><span class="line">            Point point[<span class="number">4</span>] = &#123;</span><br><span class="line">                minLoc,</span><br><span class="line">                Point(minLoc.x,minLoc.y+pyramidModel.rows),</span><br><span class="line">                Point(minLoc.x+pyramidModel.cols,minLoc.y),</span><br><span class="line">                Point(minLoc.x+pyramidModel.cols,minLoc.y+pyramidModel.rows)</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">//寻找左上角和右下角</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                TransCoor(point[i],d,pyramidSrc.rows,pyramidSrc.cols);</span><br><span class="line">                Min(topLeftP.x,point[i].x);</span><br><span class="line">                Min(topLeftP.y,point[i].y);</span><br><span class="line">                Max(ButtonRightP.x,point[i].x);</span><br><span class="line">                Max(ButtonRightP.y,point[i].y);</span><br><span class="line">            &#125;</span><br><span class="line">            Min(dmin,d);</span><br><span class="line">            Max(dmax,d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(isMatch == <span class="literal">false</span>)<span class="keyword">return</span> ;<span class="comment">//如果没匹配到则返回</span></span><br><span class="line">    <span class="comment">//更新感兴趣区域</span></span><br><span class="line">    topLeftP*=<span class="number">1</span>&lt;&lt;level;</span><br><span class="line">    ButtonRightP*=<span class="number">1</span>&lt;&lt;level;</span><br><span class="line">    Max(ROI.x,topLeftP.x+ROI.x);</span><br><span class="line">    Max(ROI.y,topLeftP.y+ROI.y);</span><br><span class="line">    Min(ROI.width,ButtonRightP.x-topLeftP.x);</span><br><span class="line">    Min(ROI.height,ButtonRightP.y-topLeftP.y);</span><br><span class="line">    Max(ROI.x,<span class="number">0</span>);</span><br><span class="line">    Max(ROI.y,<span class="number">0</span>);</span><br><span class="line">    Min(ROI.width,src.cols);</span><br><span class="line">    Min(ROI.height,src.rows);</span><br><span class="line">    degreeMax = dmax;</span><br><span class="line">    degreeMin = dmin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">FindTemplate</span><span class="params">(Mat src,Mat model)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Rect ROI = Rect(<span class="number">0</span>,<span class="number">0</span>,src.cols,src.rows);</span><br><span class="line">    degreeMin = <span class="number">0</span>,degreeMax = <span class="number">359</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=level;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        FindROI(src(ROI),ROI,i,model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;degreeMax&lt;&lt;<span class="string">" "</span>&lt;&lt;degreeMin&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//原始图像中匹配</span></span><br><span class="line">    Point center = Match(src(ROI),model);</span><br><span class="line">    <span class="comment">//还原中心坐标</span></span><br><span class="line">    TransCoor(center,degree,ROI.height,ROI.width);</span><br><span class="line">    center.x+=ROI.x;</span><br><span class="line">    center.y+=ROI.y;</span><br><span class="line"></span><br><span class="line">    TransCoor(center,degree,src.rows,src.cols,<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    寻找直线端点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindLinePoint</span><span class="params">(Mat src,Point startP,Point &amp;firstP,Point &amp;secondP,<span class="keyword">int</span> &amp;dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> y = startP.y;</span><br><span class="line">    Mat gray;</span><br><span class="line">    cvtColor(src,gray,COLOR_RGB2GRAY);</span><br><span class="line">    <span class="keyword">while</span>(y&lt;src.rows)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> deri = (<span class="keyword">int</span>)gray.at&lt;uchar&gt;(y,startP.x)-</span><br><span class="line">                   (<span class="keyword">int</span>)gray.at&lt;uchar&gt;(y+<span class="number">1</span>,startP.x);</span><br><span class="line">        <span class="keyword">if</span>( deri &lt; <span class="number">-65</span>)<span class="comment">//像素变大且跨度大于阈值则为第一个点</span></span><br><span class="line">        &#123;</span><br><span class="line">            firstP = Point(startP.x,y+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( deri &gt; <span class="number">65</span>)<span class="comment">//像素变小且跨度大于阈值则为第二个点</span></span><br><span class="line">        &#123;</span><br><span class="line">            secondP = Point(startP.x,y+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        y++;</span><br><span class="line">    &#125;</span><br><span class="line">    dis = <span class="built_in">abs</span>(firstP.y-secondP.y);<span class="comment">//计算尺寸</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">(Mat src,Mat model)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//寻找匹配到的区域的中心点</span></span><br><span class="line">    Point center = FindTemplate(src,model);</span><br><span class="line">    <span class="comment">//寻找火花塞间隙的两个端点，并计算尺寸</span></span><br><span class="line">    Point firstP,secondP;</span><br><span class="line">    <span class="keyword">int</span> dis;</span><br><span class="line">    FindLinePoint(Rotate(src,degree),center,firstP,secondP,dis);</span><br><span class="line">    <span class="comment">// //标记并输出图像</span></span><br><span class="line">     Mat dst;</span><br><span class="line">     src.copyTo(dst);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// //将坐标变换为原图</span></span><br><span class="line">    TransCoor(center,degree,src.rows,src.cols);</span><br><span class="line">    TransCoor(firstP,degree,src.rows,src.cols);</span><br><span class="line">    TransCoor(secondP,degree,src.rows,src.cols);</span><br><span class="line"></span><br><span class="line">     circle(dst,center,<span class="number">3</span>,Scalar(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>));</span><br><span class="line">    line(dst,firstP,secondP,Scalar(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>));</span><br><span class="line">    putText(dst,<span class="string">"d:"</span>+to_string(dis),(secondP+firstP)/<span class="number">2</span>+Point(<span class="number">10</span>,<span class="number">0</span>),</span><br><span class="line">            FONT_HERSHEY_COMPLEX,<span class="number">0.5</span>,Scalar(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>));</span><br><span class="line">     imshow(<span class="string">"dst"</span>,dst);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> pattern_jpg;</span><br><span class="line">    <span class="built_in">vector</span>&lt;String&gt; image_files;</span><br><span class="line">    pattern_jpg = <span class="string">".\\img\\*.png"</span>;</span><br><span class="line">    glob(pattern_jpg, image_files);<span class="comment">//读取图片路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建模板</span></span><br><span class="line">    <span class="built_in">string</span> mode_path = <span class="string">".\\img\\model.png"</span>;</span><br><span class="line">    Mat model = imread(mode_path);<span class="comment">//模板</span></span><br><span class="line">   <span class="keyword">if</span>(model.empty())<span class="comment">//读取不到图片</span></span><br><span class="line">   &#123;</span><br><span class="line">       Mat img=imread(image_files[<span class="number">0</span>]);</span><br><span class="line">       model = img(Rect(<span class="number">250</span>,<span class="number">150</span>,<span class="number">120</span>,<span class="number">80</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//处理图片</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;image_files.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; image_files[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(image_files[i]==<span class="string">".\\img\\model.png"</span>)<span class="keyword">continue</span>;</span><br><span class="line">   Mat img=imread(image_files[i]);</span><br><span class="line">        Deal(img,model);</span><br><span class="line">        waitKey();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p><img src="/基于OpenCV和图像金字塔的模板匹配——火花塞间隙尺寸测量/匹配结果1.png" alt="匹配结果1"><br><img src="/基于OpenCV和图像金字塔的模板匹配——火花塞间隙尺寸测量/匹配结果2.png" alt="匹配结果2"><br><img src="/基于OpenCV和图像金字塔的模板匹配——火花塞间隙尺寸测量/匹配结果3.png" alt="匹配结果3"></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>在这个项目中我们学到了如何基于opencv库中的模板匹配实现待识别器件的定位，以及根据位置信息测量所需的参数。该技术可用于简单环境下的零件尺寸测量。由于需要旋转角度匹配时可以匹配旋转的图片，所以速度非常的慢。但使用图像金字塔进行优化后，速度提升非常之大。</p>]]></content>
    
    <summary type="html">
    
       
    
    </summary>
    
      <category term="计算机" scheme="http://kxjzxc.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="程序" scheme="http://kxjzxc.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="OpenCV" scheme="http://kxjzxc.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E7%A8%8B%E5%BA%8F/OpenCV/"/>
    
    
      <category term="C++" scheme="http://kxjzxc.github.io/tags/C/"/>
    
      <category term="OpenCV" scheme="http://kxjzxc.github.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理之基于opencv的人腿跟踪检测</title>
    <link href="http://kxjzxc.github.io/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B9%8B%E5%9F%BA%E4%BA%8Eopencv%E7%9A%84%E4%BA%BA%E8%85%BF%E8%B7%9F%E8%B8%AA%E6%A3%80%E6%B5%8B.html"/>
    <id>http://kxjzxc.github.io/数字图像处理之基于opencv的人腿跟踪检测.html</id>
    <published>2021-06-26T08:25:33.000Z</published>
    <updated>2021-06-26T08:53:03.191Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本项目是数字图像处理课程的大作业，选题为人腿跟踪的机器人。与之前实验不同的是本次实验将应用到机器人平台进行验证，所以使用了ROS系统控制。</p><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><ol><li>Ubuntu18.04</li><li>ROS melodic</li><li>Opencv3</li></ol><h1 id="研究目标"><a href="#研究目标" class="headerlink" title="研究目标"></a>研究目标</h1><p>1、实现机器小车识别并跟踪人腿的功能</p><h1 id="研究内容"><a href="#研究内容" class="headerlink" title="研究内容"></a>研究内容</h1><p>1、采用颜色分割算法，实现对黑色的提取功能。<br>2、采用特征提取算法，实现对已分割图像的有效轮廓提取。<br>3、采用运动决策算法，实现依据有效轮廓对小车的运动控制。</p><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><h2 id="针对颜色分离功能"><a href="#针对颜色分离功能" class="headerlink" title="针对颜色分离功能"></a>针对颜色分离功能</h2><p>1.1 先对图像进行伽马变换，使从摄像头获得的图片变亮，利于后续的颜色选择<br>1.2 对图片进行高斯模糊，消去噪声，<br>1.3 将图片从RGB色度空间转换到HSV色度空间，利于图像的颜色分割。<br>1.4 对提取的图片进行灰度变换并进行开运算，减少其他区域干扰。<br>源程序：<br>伽马校正(网上复制粘贴的)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GammaCorrection</span><span class="params">(Mat src, Mat &amp;dst, <span class="keyword">float</span> fGamma)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// build look up table</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> lut[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++ )</span><br><span class="line">&#123;</span><br><span class="line">lut[i] = saturate_cast&lt;uchar&gt;(<span class="built_in">pow</span>((<span class="keyword">float</span>)(i/<span class="number">255.0</span>), fGamma) * <span class="number">255.0f</span>);<span class="comment">//防止颜色溢出操作</span></span><br><span class="line">&#125;</span><br><span class="line">dst = src.clone();</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> channels = dst.channels();</span><br><span class="line"><span class="keyword">switch</span>(channels)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">&#123;</span><br><span class="line">MatIterator_&lt;uchar&gt; it, end;</span><br><span class="line"><span class="keyword">for</span>( it = dst.begin&lt;uchar&gt;(), end = dst.end&lt;uchar&gt;(); it != end; it++ )</span><br><span class="line">*it = lut[(*it)];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: </span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">MatIterator_&lt;Vec3b&gt; it, end;</span><br><span class="line"><span class="keyword">for</span>( it = dst.begin&lt;Vec3b&gt;(), end = dst.end&lt;Vec3b&gt;(); it != end; it++ )</span><br><span class="line">&#123;</span><br><span class="line">(*it)[<span class="number">0</span>] = lut[((*it)[<span class="number">0</span>])];</span><br><span class="line">(*it)[<span class="number">1</span>] = lut[((*it)[<span class="number">1</span>])];</span><br><span class="line">(*it)[<span class="number">2</span>] = lut[((*it)[<span class="number">2</span>])];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>颜色分割</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Separate</span><span class="params">(Mat src,Mat &amp;dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GammaCorrection(src,src,<span class="number">1</span>/<span class="number">1.6</span>);<span class="comment">//伽马变换</span></span><br><span class="line">imshow(<span class="string">"src"</span>,src);</span><br><span class="line">GaussianBlur(src,src,Size(<span class="number">7</span>,<span class="number">7</span>),<span class="number">7</span>,<span class="number">7</span>);<span class="comment">//高斯模糊</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转换到HSV色度空间</span></span><br><span class="line">Mat hsv;</span><br><span class="line">cvtColor(src,hsv,COLOR_BGR2HSV);<span class="comment">//</span></span><br><span class="line"><span class="comment">//提取黑色</span></span><br><span class="line"><span class="comment">//thre.convertTo(thre,CV_8UC1,-1,255);</span></span><br><span class="line">inRange(hsv, Scalar(<span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>),Scalar(<span class="number">180</span>,<span class="number">255</span>, <span class="number">46</span>), dst);<span class="comment">//颜色分割</span></span><br><span class="line"><span class="comment">//开运算</span></span><br><span class="line">Mat element=getStructuringElement(MORPH_RECT, Size(<span class="number">15</span>,<span class="number">15</span>));</span><br><span class="line">Mat opened;</span><br><span class="line">morphologyEx(dst, dst, MORPH_OPEN, element);;</span><br><span class="line">imshow(<span class="string">"black"</span>,dst);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="针对特征识别功能"><a href="#针对特征识别功能" class="headerlink" title="针对特征识别功能"></a>针对特征识别功能</h2><p>2.1 对处理后的灰度图进行寻找轮廓，绘画轮廓边框和轮廓中心点，判断边框是否是所需要的轮廓边框。<br>2.2 判断依据有矩形的长宽比是否为长边形，边框是否是大致竖直状态，边框大小是否处于面积阈值范围。<br>2.3 得到人腿的准确边框。<br>源程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两点间距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">SideCalc</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> sqrtf(powf(a.x-b.x,<span class="number">2</span>)+powf(a.y-b.y,<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直线的斜率</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Grad</span><span class="params">(Point a,Point b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.x==b.x)<span class="keyword">return</span> oo;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">fabs</span>(a.y-b.y)/<span class="built_in">fabs</span>(a.x-b.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Command</span><span class="params">(Mat src,geometry_msgs::Twist &amp;cmd_red)</span><span class="comment">//根据分离出来的图像决定dashgo的行动</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//寻找轮廓</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt;&gt; contours;</span><br><span class="line"><span class="built_in">vector</span>&lt;Vec4i&gt; hierarchy;</span><br><span class="line">findContours(src, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"><span class="comment">//对每个找到的轮廓创建可倾斜的边界框</span></span><br><span class="line"><span class="built_in">vector</span>&lt;RotatedRect&gt; minRect(contours.size());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; contours.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">    minRect[i] = minAreaRect(Mat(contours[i]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;<span class="comment">//是否有且仅有一个符合条件的边框</span></span><br><span class="line"><span class="function">Point <span class="title">center</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>)</span></span>;<span class="comment">//轮廓中心点</span></span><br><span class="line"><span class="keyword">double</span> Area=<span class="number">-1</span>;</span><br><span class="line"><span class="comment">//筛选边框并且根据有效轮廓决定运动参数（如果有多个，则参数无意义）</span></span><br><span class="line"><span class="comment">//绘出有效轮廓及其可倾斜的边界框</span></span><br><span class="line">Mat drawing = Mat::zeros(src.size(), CV_8UC3);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; contours.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">    Point2f rect_points[<span class="number">4</span>]; <span class="comment">//轮廓四个拐点</span></span><br><span class="line">minRect[i].points(rect_points);</span><br><span class="line"><span class="comment">//计算方框相邻边长和面积</span></span><br><span class="line"><span class="keyword">double</span> side1=SideCalc(rect_points[<span class="number">0</span>],rect_points[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">double</span> side2=SideCalc(rect_points[<span class="number">1</span>],rect_points[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">double</span> area=side1*side2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout&lt;&lt;"area:"&lt;&lt;area&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//判断轮廓形状是否是要求长方形</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;"WHratio:"&lt;&lt;side1/side2&lt;&lt;" "&lt;&lt;side2/side1&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(side1/side2&gt;WHRATIO&amp;&amp;side2/side1&gt;WHRATIO)<span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//判断长方形长边的斜率</span></span><br><span class="line"><span class="keyword">double</span> longGrad;</span><br><span class="line"><span class="keyword">if</span>(side1&gt;side2)longGrad=Grad(rect_points[<span class="number">0</span>],rect_points[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">else</span> longGrad=Grad(rect_points[<span class="number">1</span>],rect_points[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;"longGrad:"&lt;&lt;longGrad&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(longGrad&lt;GRAD)<span class="keyword">continue</span>;<span class="comment">//如果过于平缓，则淘汰该矩形</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断轮廓的大小，并且根据可能轮廓判断轮廓与机器人距离</span></span><br><span class="line"><span class="keyword">if</span>(area&gt;=<span class="number">130000</span>||area&lt;<span class="number">15000</span>)<span class="keyword">continue</span>;<span class="comment">//如果距离过远或者过近则不运动，同时排除掉过小的边框</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找轮廓中心点，并绘制边框</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;            </span><br><span class="line">    line(drawing, rect_points[j], rect_points[(j + <span class="number">1</span>) % <span class="number">4</span>], Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>, <span class="number">50</span>);</span><br><span class="line">    center.x+=rect_points[j].x;</span><br><span class="line">    center.y+=rect_points[j].y;</span><br><span class="line"> &#125;</span><br><span class="line">center.x/=<span class="number">4</span>;</span><br><span class="line">center.y/=<span class="number">4</span>;</span><br><span class="line">circle(drawing,center,<span class="number">2</span>,Scalar(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>));</span><br><span class="line">……</span><br><span class="line">&#125;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="针对运动决策功能"><a href="#针对运动决策功能" class="headerlink" title="针对运动决策功能"></a>针对运动决策功能</h2><p>3.1 对得到的边框进行筛选，并依据边框的大小进行判断目标的远近，边框中心点与图像中心点比较得到目标的左右偏离位置<br>3.2 依据具体大小，偏离距离进行角速度和线速度的规划，并设置阻尼函数，使小车运行，线速度随远近而变大或变小，角速度随偏离距离增加或减小。<br>3.3 最终实现机器人的人腿跟踪识别。<br>源程序：<br>运动规划</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> vec=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> angle_vec=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Command</span><span class="params">(Mat src,geometry_msgs::Twist &amp;cmd_red)</span><span class="comment">//根据分离出来的图像决定dashgo的行动</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">……</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; contours.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">……</span><br><span class="line"><span class="keyword">if</span>(Area&gt;<span class="number">-1</span>)<span class="comment">//已有有效边框</span></span><br><span class="line">&#123;</span><br><span class="line">Area=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> Area=area;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">imshow(<span class="string">"Contours"</span>,drawing);</span><br><span class="line">    <span class="comment">//制定机器人指令</span></span><br><span class="line">    <span class="keyword">if</span>(Area==<span class="number">-1</span>)<span class="comment">//视野没有有效轮廓</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断机器人速度</span></span><br><span class="line"><span class="keyword">double</span> ref_vec=<span class="number">1.0f</span>*(<span class="number">130000</span>-Area)/<span class="number">260000.0f</span>;<span class="comment">//目标速度</span></span><br><span class="line">vec=Damp(ref_vec,vec);<span class="comment">//算出阻尼后的速度</span></span><br><span class="line">cmd_red.linear.x=vec;</span><br><span class="line">    <span class="comment">//判断机器人前进的方向</span></span><br><span class="line">    <span class="keyword">double</span> centerL=drawing.cols*<span class="number">5</span>/<span class="number">11</span>;</span><br><span class="line">    <span class="keyword">double</span> centerR=drawing.rows*<span class="number">6</span>/<span class="number">11</span>;</span><br><span class="line"><span class="keyword">double</span> ref_angle_vec=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(center.x&lt;=centerL)ref_angle_vec=(centerL-center.x)/centerL;<span class="comment">//左边</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(center.x&gt;centerR)ref_angle_vec=(centerR-center.x)/centerL;<span class="comment">//右边</span></span><br><span class="line">angle_vec=Damp(ref_angle_vec,angle_vec);<span class="comment">//算出阻尼后的速度</span></span><br><span class="line">cmd_red.angular.z=angle_vec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阻尼函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Kp 0.1</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Damp</span><span class="params">(<span class="keyword">double</span> vec,<span class="keyword">double</span> last_vec)</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> error=vec-last_vec;</span><br><span class="line"><span class="keyword">double</span> output=last_vec+error*Kp;</span><br><span class="line"><span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p>分别对颜色分割、特征提取、运动决策功能进行了实验验证，实验过程介绍<br>结果1：对色度空间的转换和伽马变换实现了对黑色较好的的颜色分割。<br>结果图：<br><img src="/数字图像处理之基于opencv的人腿跟踪检测/颜色分离.png" alt="颜色分离"><br>结果2：对已分割完成后的图片进行轮廓绘画并标出其中心点，并依据判断条件去除不符合条件的边框。<br>结果图：<br><img src="/数字图像处理之基于opencv的人腿跟踪检测/方框选取.png" alt="方框选取"><br>结果3：根据轮廓中心点与图像中心点的坐标判断，得到机器人左右控制的速度指令。根据轮廓面积的大小控制机器人前进的速度大小。<br>结果图：<br><img src="/数字图像处理之基于opencv的人腿跟踪检测/机器人控制.png" alt="机器人控制"></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>本文设计了颜色分离，特征提取，运动决策算法，实现了对黑色的提取、对分离图片的边框选取、对机器人小车的运动控制功能，取得了有效提取并分离出黑色、对已分割图片轮廓的完好提取并绘画边框、较良好的控制小车的运动的效果。实验过程说明了颜色分割效果较好、轮廓边框判断选取准确、小车速度转速控制稳定。<br>本文设计的算法具有如下优缺点：<br>优点：使用最基础的算法和代码实现了较为良好的效果；算法条理清晰，并可以消除大量黑色干扰物体；消除了小车突然启动时的速度突变现象。<br>缺点：背景中不能有大块的黑色干扰，否则会与人腿形状融合导致无法成为有效边框；只能识别纯色裤子的人腿，非常花哨的裤子可能会干扰；多个轮廓直接停止运动，不会继续跟随<br>可以通过哪些方法进行改进：通过深度学习或者模式识别，直接针对人腿进行识别，可以较为良好的避免背景中的干扰，并且不再收到颜色的干扰；刚出现多个轮廓时，直接跟踪最大轮廓。</p>]]></content>
    
    <summary type="html">
    
       
    
    </summary>
    
      <category term="计算机" scheme="http://kxjzxc.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="数字图像处理" scheme="http://kxjzxc.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="C++" scheme="http://kxjzxc.github.io/tags/C/"/>
    
      <category term="OpenCV" scheme="http://kxjzxc.github.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理之目标颜色识别</title>
    <link href="http://kxjzxc.github.io/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B9%8B%E7%9B%AE%E6%A0%87%E9%A2%9C%E8%89%B2%E8%AF%86%E5%88%AB.html"/>
    <id>http://kxjzxc.github.io/数字图像处理之目标颜色识别.html</id>
    <published>2021-06-26T07:02:55.000Z</published>
    <updated>2021-06-26T08:15:49.540Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><p>找到目标颜色所在区域</p><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><ol><li>色度空间转换<br>1.1 读取图像并滤波<br>1.2 根据公式将图像从rgb转换到hsv色度空间<br><img src="/数字图像处理之目标颜色识别/rgb2hsv公式.png" alt="rgb2hsv公式"></li><li>颜色分割<br>2.1 利用 createTrackbar()函数建立滑动条，对颜色空间转换后的各通道进行阈值分割<br>2.2 根据阈值分割的结果，判断各种颜色的对应阈值<br>2.3 针对不同颜色，分别对图像进行阈值分割<br>2.4 对阈值分割结果进行数学统计，判断图像的颜色并输出分类结果<br><img src="/数字图像处理之目标颜色识别/hsv表.png" alt="hsv参考表"></li><li>目标颜色检测<br>3.1 对图像进行预处理，消除噪声并获取二值化图<br>3.2 对二值图进行轮廓检测；<br>3.3 根据任务目标选择合适的多边形描述轮廓；<br>3.4 获取多边形区域后，从原图中截取该区域图像；<br>3.5 对多边形区域的图像进行颜色分割，对分割结果进行统计，判断图像的颜色并输出分类结果</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINEAR_X 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HMaxValue 255</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SMaxValue 255</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VMaxValue 255</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> oo 1e9+7</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">int</span> H_min=<span class="number">100</span>, H_max=<span class="number">124</span>, S_min=<span class="number">43</span>, S_max=<span class="number">255</span>, V_min=<span class="number">46</span>, V_max=<span class="number">255</span>;</span><br><span class="line">Mat img_in;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Gaussian</span><span class="params">(Mat input, Mat output, <span class="keyword">double</span> sigma)</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> weight;<span class="comment">//权重</span></span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">double</span> Gaussian_Temp[SIZE][SIZE] = &#123;<span class="number">0</span>&#125;;<span class="comment">//模板</span></span><br><span class="line">weight = (<span class="number">2</span>*PI*sigma*sigma);  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i &lt;SIZE;i++)  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; SIZE;j++)  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">int</span> x = i - SIZE/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> y = j - SIZE/<span class="number">2</span>;</span><br><span class="line">    Gaussian_Temp[i][j] =<span class="built_in">exp</span>(-(x*x+y*y)/(<span class="number">2.0</span>*sigma*sigma))/weight;  </span><br><span class="line">    sum += Gaussian_Temp[i][j];  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE;i++)  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; SIZE;j++)  </span><br><span class="line">&#123;  </span><br><span class="line">    Gaussian_Temp[i][j] = Gaussian_Temp[i][j]/sum;<span class="comment">//归一化处理  </span></span><br><span class="line">    <span class="comment">//printf("%f ",Gaussian_Temp[i][j]);  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//printf("\n");  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rows = output.rows;</span><br><span class="line"><span class="keyword">int</span> cols = output.cols;</span><br><span class="line"><span class="keyword">int</span> channels = input.channels();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> sum3[<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> sum1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;SIZE;k++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;SIZE;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=i+k-SIZE/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> y=j+t-SIZE/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>||y&lt;<span class="number">0</span>||x&gt;=rows||y&gt;=cols)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">double</span> m=Gaussian_Temp[k][t];</span><br><span class="line"><span class="keyword">if</span>(channels == <span class="number">1</span>)sum1+=m*input.at&lt;uchar&gt;(x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(channels == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">Vec3b rgb = input.at&lt;Vec3b&gt;(x,y);</span><br><span class="line">sum3[<span class="number">0</span>]+=m*rgb[<span class="number">0</span>];</span><br><span class="line">sum3[<span class="number">1</span>]+=m*rgb[<span class="number">1</span>];</span><br><span class="line">sum3[<span class="number">2</span>]+=m*rgb[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(channels == <span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sum3[k]&gt;<span class="number">255</span>)sum3[k]=<span class="number">255</span>;</span><br><span class="line"><span class="keyword">if</span>(sum3[k]&lt;<span class="number">0</span>)sum3[k]=<span class="number">0</span>;</span><br><span class="line">output.at&lt;Vec3b&gt;(i,j)[k]=sum3[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(sum1&gt;<span class="number">255</span>)sum1=<span class="number">255</span>;</span><br><span class="line"><span class="keyword">if</span>(sum1&lt;<span class="number">0</span>)sum1=<span class="number">0</span>;</span><br><span class="line">output.at&lt;uchar&gt;(i,j)=sum1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RBG2HSV</span><span class="params">(Mat input,Mat output)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rows=input.rows;</span><br><span class="line"><span class="keyword">int</span> cols=input.cols;</span><br><span class="line"><span class="comment">//cout&lt;&lt;rows&lt;&lt;" "&lt;&lt;cols&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)&#123;</span><br><span class="line">Vec3b pix=input.at&lt;Vec3b&gt;(i,j);<span class="comment">//012:BGR</span></span><br><span class="line"><span class="keyword">float</span> b=<span class="number">1.0</span>*pix[<span class="number">0</span>]/<span class="number">255</span>;</span><br><span class="line"><span class="keyword">float</span> g=<span class="number">1.0</span>*pix[<span class="number">1</span>]/<span class="number">255</span>;</span><br><span class="line"><span class="keyword">float</span> r=<span class="number">1.0</span>*pix[<span class="number">2</span>]/<span class="number">255</span>;</span><br><span class="line"><span class="keyword">float</span> maxrgb=max(r,max(g,b));</span><br><span class="line"><span class="keyword">float</span> minrgb=min(r,min(g,b));</span><br><span class="line"><span class="keyword">float</span> diff=maxrgb-minrgb;</span><br><span class="line"><span class="keyword">float</span> v=maxrgb;</span><br><span class="line"><span class="keyword">float</span> s=(diff/v);</span><br><span class="line"><span class="keyword">float</span> h;</span><br><span class="line"><span class="keyword">if</span>(maxrgb-minrgb&lt;<span class="number">1e-5</span>)h=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(maxrgb==r)h=<span class="number">60</span>*(g-b)/diff;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(maxrgb==g)h=<span class="number">60</span>*(b-r)/diff+<span class="number">120</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(maxrgb==b)h=<span class="number">60</span>*(r-g)/diff+<span class="number">240</span>;</span><br><span class="line"><span class="keyword">if</span>(h&lt;<span class="number">0</span>)h+=<span class="number">360</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(h&gt;<span class="number">359</span>)h-=<span class="number">360</span>;</span><br><span class="line">output.at&lt;Vec3b&gt;(i,j)[<span class="number">0</span>]=(<span class="keyword">int</span>)(h*<span class="number">180</span>/<span class="number">360</span>);</span><br><span class="line">output.at&lt;Vec3b&gt;(i,j)[<span class="number">1</span>]=(<span class="keyword">int</span>)(s*<span class="number">255</span>);</span><br><span class="line">output.at&lt;Vec3b&gt;(i,j)[<span class="number">2</span>]=(<span class="keyword">int</span>)(v*<span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">画颜色统计图</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Statistical</span><span class="params">(Mat input)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> weigth=<span class="number">210</span>,height=<span class="number">300</span>;</span><br><span class="line">    Mat output=Mat::zeros(height,weigth,CV_8UC3);</span><br><span class="line"><span class="keyword">int</span> rows=input.rows;</span><br><span class="line"><span class="keyword">int</span> cols=input.cols;</span><br><span class="line"><span class="keyword">int</span> colorNum[<span class="number">7</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> sum=rows*cols;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)&#123;</span><br><span class="line">Vec3b pix=input.at&lt;Vec3b&gt;(i,j);<span class="comment">//012:HSV</span></span><br><span class="line"><span class="keyword">if</span>(pix[<span class="number">1</span>]&lt;<span class="number">43</span>||pix[<span class="number">2</span>]&lt;<span class="number">46</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//pix[0]=pix[0]*180/255;</span></span><br><span class="line"><span class="keyword">int</span> color=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>((pix[<span class="number">0</span>]&gt;=<span class="number">0</span>&amp;&amp;pix[<span class="number">0</span>]&lt;=<span class="number">10</span>)||(pix[<span class="number">0</span>]&gt;=<span class="number">156</span>&amp;&amp;pix[<span class="number">0</span>]&lt;=<span class="number">180</span>))color=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pix[<span class="number">0</span>]&gt;=<span class="number">11</span>&amp;&amp;pix[<span class="number">0</span>]&lt;=<span class="number">25</span>)color=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pix[<span class="number">0</span>]&gt;=<span class="number">26</span>&amp;&amp;pix[<span class="number">0</span>]&lt;=<span class="number">34</span>)color=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pix[<span class="number">0</span>]&gt;=<span class="number">35</span>&amp;&amp;pix[<span class="number">0</span>]&lt;=<span class="number">77</span>)color=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pix[<span class="number">0</span>]&gt;=<span class="number">78</span>&amp;&amp;pix[<span class="number">0</span>]&lt;=<span class="number">99</span>)color=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pix[<span class="number">0</span>]&gt;=<span class="number">100</span>&amp;&amp;pix[<span class="number">0</span>]&lt;=<span class="number">124</span>)color=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pix[<span class="number">0</span>]&gt;=<span class="number">125</span>&amp;&amp;pix[<span class="number">0</span>]&lt;=<span class="number">155</span>)color=<span class="number">6</span>;</span><br><span class="line">colorNum[color]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    Scalar Color[<span class="number">7</span>]=&#123;Scalar(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),Scalar(<span class="number">0</span>,<span class="number">125</span>,<span class="number">255</span>),Scalar(<span class="number">0</span>,<span class="number">255</span>,<span class="number">255</span>),Scalar(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),Scalar(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>),Scalar(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),Scalar(<span class="number">255</span>,<span class="number">0</span>,<span class="number">255</span>)&#125;;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;  </span><br><span class="line">    <span class="keyword">int</span> h=colorNum[i]*height/sum;</span><br><span class="line">    rectangle(output,Point(i*<span class="number">30</span>,height),Point((i+<span class="number">1</span>)*<span class="number">30</span><span class="number">-1</span>, height-h),Color[i],<span class="number">-1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> imshow(<span class="string">"color"</span>,output);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorDetection</span><span class="params">(Mat input)</span></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Point&gt; &gt; contours;</span><br><span class="line"><span class="built_in">vector</span>&lt;Vec4i&gt; hierarchy; </span><br><span class="line">findContours( input, contours, hierarchy,  RETR_EXTERNAL, CHAIN_APPROX_NONE, Point(<span class="number">0</span>, <span class="number">0</span>) );</span><br><span class="line"><span class="keyword">if</span>(contours.size()==<span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> area=<span class="number">0</span>,x=<span class="number">0</span>,y=<span class="number">0</span>,a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>,d=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;contours.size();k++)&#123;</span><br><span class="line">    RotatedRect rectPoint = minAreaRect(contours[k]);</span><br><span class="line">    Point2f point[<span class="number">4</span>]; </span><br><span class="line">    <span class="comment">//将rectPoint变量中存储的坐标值放到 point的数组中  </span></span><br><span class="line">    rectPoint.points(point);</span><br><span class="line"><span class="comment">//寻找轮廓的左上角和右下角，算出长宽</span></span><br><span class="line">    <span class="keyword">int</span> max_x=<span class="number">0</span>,max_y=<span class="number">0</span>,min_x=oo,min_y=oo;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">    <span class="keyword">if</span> (max_x &lt; point[i].x)max_x=<span class="keyword">int</span>(point[i].x+<span class="number">0.5</span>);</span><br><span class="line">    <span class="keyword">if</span> (max_y &lt; point[i].y)max_y=<span class="keyword">int</span>(point[i].y+<span class="number">0.5</span>);</span><br><span class="line">    <span class="keyword">if</span> (min_x &gt; point[i].x)min_x=(<span class="keyword">int</span>)point[i].x;</span><br><span class="line">    <span class="keyword">if</span> (min_y &gt; point[i].y)min_y=(<span class="keyword">int</span>)point[i].y;</span><br><span class="line">    </span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">if</span>(min_x&lt;<span class="number">0</span>)min_x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(min_y&lt;<span class="number">0</span>)min_y=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(max_x&gt;=input.cols)max_x=input.cols<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(max_y&gt;=input.rows)max_y=input.rows<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>((max_x-min_x)*(max_y-min_y)&gt;area)&#123;</span><br><span class="line">        area=(max_x-min_x)*(max_y-min_y);</span><br><span class="line">        x=min_x;</span><br><span class="line">        y=min_y;</span><br><span class="line">        a=max_x;</span><br><span class="line">        b=max_y;</span><br><span class="line">        c=max_x-min_x;</span><br><span class="line">        d=max_y-min_y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(c==<span class="number">0</span>||d==<span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//截取ROI区域</span></span><br><span class="line">    Mat output=img_in(Rect(x,y,c,d));</span><br><span class="line">    imshow(<span class="string">"ROI"</span>,output);</span><br><span class="line">    Mat hsv=Mat::zeros(output.size(),CV_8UC3);</span><br><span class="line">    RBG2HSV(output,hsv);</span><br><span class="line"><span class="comment">//统计截取之后的图像各种颜色的含量</span></span><br><span class="line">    Statistical(hsv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">颜色分割</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thresholdSeq</span><span class="params">(<span class="keyword">int</span> var,<span class="keyword">void</span>* usrdata)</span></span>&#123;</span><br><span class="line">Mat input = *(<span class="keyword">static_cast</span>&lt;Mat*&gt; (usrdata));</span><br><span class="line">Mat output=Mat::zeros(input.size(),CV_8UC1);</span><br><span class="line"><span class="keyword">int</span> rows=input.rows;</span><br><span class="line"><span class="keyword">int</span> cols=input.cols;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)&#123;</span><br><span class="line">Vec3b pix=input.at&lt;Vec3b&gt;(i,j);<span class="comment">//012:HSV</span></span><br><span class="line"><span class="keyword">if</span>(pix[<span class="number">0</span>]&lt;H_min||pix[<span class="number">0</span>]&gt;H_max)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(pix[<span class="number">1</span>]&lt;S_min||pix[<span class="number">1</span>]&gt;S_max)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(pix[<span class="number">2</span>]&lt;V_min||pix[<span class="number">2</span>]&gt;V_max)<span class="keyword">continue</span>;</span><br><span class="line">output.at&lt;uchar&gt;(i,j)=<span class="number">255</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">imshow(<span class="string">"thresholdSeq"</span>,output);</span><br><span class="line"><span class="comment">//目标颜色检测</span></span><br><span class="line">colorDetection(output);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//读取原始图像</span></span><br><span class="line">img_in=imread(argv[<span class="number">1</span>],IMREAD_UNCHANGED);</span><br><span class="line"><span class="comment">//检查是否读取图像</span></span><br><span class="line"><span class="keyword">if</span>(img_in.empty())&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Error! Input image cannot be read...\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imshow(<span class="string">"src"</span>,img_in);</span><br><span class="line">Mat frOut1=Mat::zeros(img_in.size(),CV_8UC3);</span><br><span class="line">Mat frOut2=Mat::zeros(img_in.size(),CV_8UC1);</span><br><span class="line"><span class="comment">// 空域滤波函数</span></span><br><span class="line">Gaussian(img_in,frOut1,<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 色度空间转换</span></span><br><span class="line">RBG2HSV(frOut1,frOut1); </span><br><span class="line"><span class="comment">//阈值分割</span></span><br><span class="line">namedWindow(<span class="string">"thresholdSeq"</span>);</span><br><span class="line">createTrackbar(<span class="string">"H_min"</span>, <span class="string">"thresholdSeq"</span>, &amp;H_min, HMaxValue, thresholdSeq,&amp;frOut1);</span><br><span class="line">createTrackbar(<span class="string">"H_max"</span>, <span class="string">"thresholdSeq"</span>, &amp;H_max, HMaxValue, thresholdSeq,&amp;frOut1);</span><br><span class="line">createTrackbar(<span class="string">"S_min"</span>, <span class="string">"thresholdSeq"</span>, &amp;S_min, SMaxValue, thresholdSeq,&amp;frOut1);</span><br><span class="line">createTrackbar(<span class="string">"S_max"</span>, <span class="string">"thresholdSeq"</span>, &amp;S_max, SMaxValue, thresholdSeq,&amp;frOut1);</span><br><span class="line">createTrackbar(<span class="string">"V_min"</span>, <span class="string">"thresholdSeq"</span>, &amp;V_min, VMaxValue, thresholdSeq,&amp;frOut1);</span><br><span class="line">createTrackbar(<span class="string">"V_max"</span>, <span class="string">"thresholdSeq"</span>, &amp;V_max, VMaxValue, thresholdSeq,&amp;frOut1);</span><br><span class="line">waitKey();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="数字图像处理之目标颜色识别/原图.png" alt="原图"><br><img src="数字图像处理之目标颜色识别/hsv图像.png" alt="hsv"><br><img src="/数字图像处理之目标颜色识别/杰尼龟.png" alt="杰尼龟"><br><img src="/数字图像处理之目标颜色识别/妙蛙种子.png" alt="妙蛙种子"><br><img src="/数字图像处理之目标颜色识别/喷火龙.png" alt="喷火龙"></p>]]></content>
    
    <summary type="html">
    
       
    
    </summary>
    
      <category term="计算机" scheme="http://kxjzxc.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="数字图像处理" scheme="http://kxjzxc.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="C++" scheme="http://kxjzxc.github.io/tags/C/"/>
    
      <category term="OpenCV" scheme="http://kxjzxc.github.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理之图像特征检测</title>
    <link href="http://kxjzxc.github.io/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B9%8B%E5%9B%BE%E5%83%8F%E7%89%B9%E5%BE%81%E6%A3%80%E6%B5%8B.html"/>
    <id>http://kxjzxc.github.io/数字图像处理之图像特征检测.html</id>
    <published>2021-06-25T11:11:07.000Z</published>
    <updated>2021-06-25T12:48:19.241Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><ol><li>边缘检测</li><li>霍夫线变换</li><li>霍夫圆变换</li></ol><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><h2 id="边缘检测"><a href="#边缘检测" class="headerlink" title="边缘检测"></a>边缘检测</h2><p>本代码采用LoG边缘检测算子</p><ol><li>算子与图像卷积</li><li>寻找零交叉点，即边缘点</li></ol><h2 id="霍夫线变换"><a href="#霍夫线变换" class="headerlink" title="霍夫线变换"></a>霍夫线变换</h2><ol><li><p>将彩色图像转化为灰度图，并对灰度图做边缘检测得到二值边缘图</p></li><li><p>参数空间离散化:对直线方程的参数$(r,\theta)$离散化，并给出$(r_{min},r_{max})$和$(\theta_{min},\theta_{max})$，划分为有限个等间距的离散值，使参数空间量化为一个个等大小网格。</p></li><li><p>设置累加器A:为每个网格单元设置累加器。A表示$(r_{min}:r_{max},\theta_{min}:\theta_{max})$，初始为0。</p></li><li><p>对图像空间中每个像素点坐标值(x,y)，计算参数空间对应的曲线方程，将该曲线穿过的格子的计数值加一。</p></li><li><p>最后，遍历A(i,j)中的寻找累加计数大于某阈值M格子，其坐标$(r_m, \theta_m)$即为检测到的直线参数。利用cvtColor()将二值边缘图转换为RGB图，并将检测到的所有直线在图中画出来。</p></li></ol><h2 id="霍夫圆变换"><a href="#霍夫圆变换" class="headerlink" title="霍夫圆变换"></a>霍夫圆变换</h2><ol><li><p>将彩色图像转化为灰度图，并对灰度图做边缘检测得到二值边缘图</p></li><li><p>设定检测半径和角度范围$(r_{min}:r_{max},\theta_{min}:\theta_{max})$，ax)，设置累加器A(x,y,r)</p></li><li><p>对图像空间中每个像素点坐标值(x,y)，在指定半径和圆心角范围内，计算参数空间对应的圆心，累加器A(x_center, y_center,r)加一。</p></li><li><p>最后，遍历累加器中的寻找累加计数大于某阈值M格子，其坐标$(x_center, y_center,r)$即为检测到的圆参数。利用cvtColor()将二值边缘图转换为RGB图，并将检测到的所有直线在图中画出来。</p></li></ol><p>显然这样的方法效率很低，时间和空间复杂度都很高，所以我们用梯度法优化。</p><ol><li>用sobel算子计算出整张图的梯度</li><li><p>对于图像中每个点，在其梯度方向上的点的累加器A(x,y)加一</p></li><li><p>遍历A(i,j)中的寻找累加计数大于某阈值M格子，其坐标$(x,y)$即为可能是圆心的点。</p></li><li>对于每个圆心计算每个像素点与他的距离，并塞入数组R，然后寻找最多的半径R的数量，如果大于阈值那么就以该圆心半径画圆。若俩个圆心距离很近，那么就选其一。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINEAR_X 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> oo 1e9+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> theta_cnt 500</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//////////////////////边缘检测//////////////////</span></span><br><span class="line"><span class="comment">//边缘检测函数 LoG边缘检测算子</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EdgeDetector</span><span class="params">(Mat input, Mat &amp;output)</span></span>&#123;</span><br><span class="line">threshold(input, input, <span class="number">150</span>, <span class="number">255</span>, THRESH_BINARY);</span><br><span class="line"><span class="comment">//imshow("threshold",input);</span></span><br><span class="line"> <span class="keyword">double</span> Gaussian_Temp[SIZE][SIZE] = &#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">16</span>,<span class="number">-2</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;&#125;;<span class="comment">//模板</span></span><br><span class="line"><span class="comment">//Mat Temp=Mat::zeros(input.size(),CV_8UC1);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rows = input.rows;</span><br><span class="line"><span class="keyword">int</span> cols = input.cols;</span><br><span class="line"><span class="keyword">double</span> *Temp  = <span class="keyword">new</span> <span class="keyword">double</span>[rows*cols];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;SIZE;k++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;SIZE;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=i+k-SIZE/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> y=j+t-SIZE/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>||y&lt;<span class="number">0</span>||x&gt;=rows||y&gt;=cols)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">double</span> m=Gaussian_Temp[k][t];</span><br><span class="line">sum+=m*input.at&lt;uchar&gt;(x,y);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Temp[i*cols+j]=sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找零交叉</span></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">2</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;,<span class="comment">//上，左，左上，左下</span></span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;&#125;;<span class="comment">//下，右，右下，右上</span></span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">2</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;,<span class="comment">//上，左，左上，左下</span></span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;<span class="comment">//下，右，右下，右上</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> pa,pb,num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)&#123;</span><br><span class="line"><span class="keyword">int</span> x1=i+dx[<span class="number">0</span>][k],y1=j+dy[<span class="number">0</span>][k];</span><br><span class="line"><span class="keyword">int</span> x2=i+dx[<span class="number">1</span>][k],y2=j+dy[<span class="number">1</span>][k];</span><br><span class="line"><span class="keyword">if</span>(x1&lt;<span class="number">0</span>||y1&lt;<span class="number">0</span>||x1&gt;=rows||y1&gt;=cols)pa=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> pa=Temp[x1*cols+y1];</span><br><span class="line"><span class="keyword">if</span>(x2&lt;<span class="number">0</span>||y2&lt;<span class="number">0</span>||x2&gt;=rows||y2&gt;=cols)pb=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> pb=Temp[x2*cols+y2];</span><br><span class="line"><span class="keyword">if</span>(pa*pb&lt;<span class="number">0</span>&amp;&amp;<span class="built_in">abs</span>(pa-pb)&gt;<span class="number">255</span>*<span class="number">0.5</span>)num++;</span><br><span class="line"><span class="comment">//cout&lt;&lt;pa&lt;&lt;" "&lt;&lt;pb&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num&gt;=<span class="number">2</span>)output.at&lt;uchar&gt;(i,j)=<span class="number">255</span>;</span><br><span class="line"><span class="keyword">else</span> output.at&lt;uchar&gt;(i,j)=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//////////////////////霍夫线变换//////////////////</span></span><br><span class="line"><span class="function">Mat <span class="title">Hough_Line</span><span class="params">(Mat input)</span></span>&#123;</span><br><span class="line">Mat output=Mat::zeros(input.size(),CV_8UC3);</span><br><span class="line">cvtColor(input,output,COLOR_GRAY2BGR);</span><br><span class="line"><span class="keyword">int</span> rows = input.rows;</span><br><span class="line"><span class="keyword">int</span> cols = input.cols;</span><br><span class="line"><span class="keyword">int</span> max_length = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(rows,<span class="number">2</span>)+<span class="built_in">pow</span>(cols,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">int</span> r_cnt=max_length*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> M = <span class="number">100</span>;<span class="comment">//阈值</span></span><br><span class="line"><span class="keyword">int</span> *A = <span class="keyword">new</span> <span class="keyword">int</span>[r_cnt*theta_cnt];<span class="comment">//累加器</span></span><br><span class="line"><span class="comment">//遍历，并累加</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(input.at&lt;uchar&gt;(i,j)==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;theta_cnt;k++)&#123;</span><br><span class="line"><span class="keyword">double</span> theta=<span class="number">2.0</span>*PI*k/theta_cnt;</span><br><span class="line"><span class="keyword">int</span> r=<span class="number">1.0</span>*i*<span class="built_in">cos</span>(theta)+<span class="number">1.0</span>*j*<span class="built_in">sin</span>(theta);<span class="comment">//直线方程</span></span><br><span class="line"><span class="keyword">if</span>(r&lt;-max_length||r&gt;=max_length)<span class="keyword">continue</span>;</span><br><span class="line">A[(r+max_length)*theta_cnt+k]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//画直线</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r_cnt;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;theta_cnt;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i*theta_cnt+j]&lt;M)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>((i&gt;<span class="number">0</span>&amp;&amp;A[i*theta_cnt+j]&lt;A[(i<span class="number">-1</span>)*theta_cnt+j])</span><br><span class="line">||(j&gt;<span class="number">0</span>&amp;&amp;A[i*theta_cnt+j]&lt;A[i*theta_cnt+j<span class="number">-1</span>]))<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>((i&lt;r_cnt<span class="number">-1</span>&amp;&amp;A[i*theta_cnt+j]&lt;A[(i+<span class="number">1</span>)*theta_cnt+j])</span><br><span class="line">||(j&lt;theta_cnt<span class="number">-1</span>&amp;&amp;A[i*theta_cnt+j]&lt;A[i*theta_cnt+j+<span class="number">1</span>]))<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">double</span> theta=<span class="number">2.0</span>*PI*j/theta_cnt;</span><br><span class="line"><span class="keyword">int</span> r = i-max_length;</span><br><span class="line"><span class="keyword">double</span> a = <span class="built_in">cos</span>(theta);</span><br><span class="line"><span class="keyword">double</span> b = <span class="built_in">sin</span>(theta);</span><br><span class="line"><span class="keyword">double</span> x1 = <span class="keyword">int</span>(b*r + <span class="number">1000</span>*(a));</span><br><span class="line"><span class="keyword">double</span> y1 = <span class="keyword">int</span>(a*r + <span class="number">1000</span>*(-b));</span><br><span class="line"><span class="keyword">double</span> x2 = <span class="keyword">int</span>(b*r - <span class="number">1000</span>*(a));</span><br><span class="line"><span class="keyword">double</span> y2 = <span class="keyword">int</span>(a*r - <span class="number">1000</span>*(-b));</span><br><span class="line">line(output,Point(x1,y1),Point(x2,y2),Scalar(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//////////////////////霍夫圆变换//////////////////</span></span><br><span class="line"><span class="function">Mat <span class="title">calc</span><span class="params">(Mat input,<span class="keyword">double</span> kernel[<span class="number">3</span>][<span class="number">3</span>],<span class="keyword">int</span> Size)</span></span>&#123;</span><br><span class="line">Mat output=Mat::zeros(input.size(),CV_8UC1);</span><br><span class="line"><span class="keyword">int</span> rows = input.rows;</span><br><span class="line"><span class="keyword">int</span> cols = input.cols;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;Size;k++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;Size;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=i+k-Size/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> y=j+t-Size/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>||y&lt;<span class="number">0</span>||x&gt;=rows||y&gt;=cols)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">double</span> m=kernel[k][t];</span><br><span class="line">output.at&lt;<span class="keyword">int</span>&gt;(i,j)+=m*input.at&lt;uchar&gt;(x,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Mat <span class="title">Hough_Circle</span><span class="params">(Mat input)</span></span>&#123;</span><br><span class="line">Mat output=Mat::zeros(input.size(),CV_8UC3);</span><br><span class="line">cvtColor(input,output,COLOR_GRAY2BGR);</span><br><span class="line"><span class="keyword">int</span> rows = input.rows;</span><br><span class="line"><span class="keyword">int</span> cols = input.cols;</span><br><span class="line"><span class="keyword">int</span> r_max=max(rows,cols)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> M = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">int</span> A[rows][cols]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> sobelx[<span class="number">3</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;,</span><br><span class="line"> &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line"> &#123;<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">double</span> sobely[<span class="number">3</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,</span><br><span class="line"> &#123;<span class="number">2</span>,<span class="number">0</span>,<span class="number">-2</span>&#125;,</span><br><span class="line"> &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">Mat dx=calc(input,sobelx,<span class="number">3</span>);</span><br><span class="line">Mat dy=calc(input,sobely,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//累加器寻找圆心</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(input.at&lt;uchar&gt;(i,j)==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">double</span> vx=dx.at&lt;<span class="keyword">int</span>&gt;(i,j);</span><br><span class="line"><span class="keyword">double</span> vy=dy.at&lt;<span class="keyword">int</span>&gt;(i,j);</span><br><span class="line"><span class="keyword">double</span> mag=<span class="built_in">sqrt</span>(vx*vx+vy*vy);</span><br><span class="line"><span class="keyword">if</span>(mag == <span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">double</span> sx=vx/mag;</span><br><span class="line"><span class="keyword">double</span> sy=vy/mag;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">-1</span>;t&lt;<span class="number">2</span>;t+=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">double</span> x=<span class="number">1.0</span>*i+sx*t;</span><br><span class="line"><span class="keyword">double</span> y=<span class="number">1.0</span>*j+sy*t;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> r=<span class="number">0</span>;r&lt;r_max;r++,x+=sx*t,y+=sy*t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> X=<span class="keyword">int</span>(x),Y=<span class="keyword">int</span>(y);</span><br><span class="line"><span class="keyword">if</span>(X&lt;<span class="number">0</span>||Y&lt;<span class="number">0</span>||X&gt;=rows||Y&gt;=cols)<span class="keyword">break</span>;</span><br><span class="line">A[X][Y]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//寻找可能圆心</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt;centerP;</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt;circleP;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i][j]&lt;<span class="number">50</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>((i&gt;<span class="number">0</span>&amp;&amp;A[i][j]&lt;A[i<span class="number">-1</span>][j])||(j&gt;<span class="number">0</span>&amp;&amp;A[i][j]&lt;A[i][j<span class="number">-1</span>]))<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>((i&lt;rows<span class="number">-1</span>&amp;&amp;A[i][j]&lt;A[i+<span class="number">1</span>][j])||(j&lt;cols<span class="number">-1</span>&amp;&amp;A[i][j]&lt;A[i][j+<span class="number">1</span>]))<span class="keyword">continue</span>;</span><br><span class="line">centerP.push_back(Point(i,j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对每个可能圆心，寻找可能半径</span></span><br><span class="line"><span class="keyword">int</span> l=centerP.size();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> cx=centerP[i].x;</span><br><span class="line"><span class="keyword">int</span> cy=centerP[i].y;</span><br><span class="line"><span class="keyword">int</span> L=circleP.size();</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;L;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> cx1=circleP[j].x;</span><br><span class="line"><span class="keyword">int</span> cy1=circleP[j].y;</span><br><span class="line"> <span class="keyword">if</span>( <span class="built_in">pow</span>(( cx1- cx),<span class="number">2</span>) + <span class="built_in">pow</span>( cy1- cy,<span class="number">2</span>) &lt;= <span class="number">9</span>)&#123;<span class="comment">//圆心相近</span></span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;R;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;rows;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;cols;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(input.at&lt;uchar&gt;(k,t)==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> r=<span class="built_in">sqrt</span>(<span class="built_in">pow</span>(cx-k,<span class="number">2</span>)+<span class="built_in">pow</span>(cy-t,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">if</span>(r+cx&lt;rows&amp;&amp;r+cy&lt;cols&amp;&amp;cx-r&gt;=<span class="number">0</span>&amp;&amp;cy-r&gt;=<span class="number">0</span>)R.push_back(r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//半径数最多的就是最有可能的</span></span><br><span class="line"><span class="keyword">if</span>(R.size()==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">sort(R.begin(),R.end());</span><br><span class="line"><span class="keyword">int</span> startR=R[<span class="number">0</span>],cnt=<span class="number">0</span>,maxcnt=<span class="number">0</span>,ansR=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;R.size();j++)&#123;</span><br><span class="line"><span class="keyword">int</span> r=R[j];</span><br><span class="line"><span class="keyword">if</span>(r-startR&gt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> nowR=(R[j<span class="number">-1</span>]+startR)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt*ansR&gt;=maxcnt*nowR)&#123;</span><br><span class="line">ansR=nowR;</span><br><span class="line">maxcnt=cnt;</span><br><span class="line">&#125;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line">startR=r;</span><br><span class="line">&#125;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(maxcnt&gt;<span class="number">700</span>)&#123;</span><br><span class="line">circle(output, Point(cy,cx),ansR , Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">0.5</span>);</span><br><span class="line">circleP.push_back(Point(cx,cy));</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">/**/</span></span><br><span class="line"><span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line"><span class="comment">//读取原始图像</span></span><br><span class="line">Mat src=imread(argv[<span class="number">1</span>],IMREAD_UNCHANGED);</span><br><span class="line"><span class="comment">//检查是否读取图像</span></span><br><span class="line"><span class="keyword">if</span>(src.empty())&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Error! Input image cannot be read...\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imshow(<span class="string">"src"</span>,src);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 灰度图转换</span></span><br><span class="line">Mat garyimg;</span><br><span class="line">cvtColor(src,garyimg,COLOR_BGR2GRAY);</span><br><span class="line">imshow(<span class="string">"gray"</span>,garyimg);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 边缘检测函数</span></span><br><span class="line">Mat frOut1=Mat::zeros(garyimg.size(),CV_8UC1);</span><br><span class="line">EdgeDetector(garyimg, frOut1);</span><br><span class="line"><span class="comment">// 线检测</span></span><br><span class="line">Mat frOut2=Hough_Line(frOut1);</span><br><span class="line"><span class="comment">// 圆检测</span></span><br><span class="line">Mat frOut3=Hough_Circle(frOut1) ;</span><br><span class="line"></span><br><span class="line">imshow(<span class="string">"Edge"</span>,frOut1);</span><br><span class="line">imshow(<span class="string">"Line"</span>,frOut2);</span><br><span class="line">imshow(<span class="string">"circle"</span>,frOut3);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Press any key to exit...\n"</span>;</span><br><span class="line">    waitKey(); <span class="comment">// Wait for key press</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="/数字图像处理之图像特征检测/原图.png" alt="原图"><br><img src="/数字图像处理之图像特征检测/边缘检测.png" alt="原图"><br><img src="/数字图像处理之图像特征检测/霍夫线变换.png" alt="原图"><br><img src="/数字图像处理之图像特征检测/霍夫圆变换.png" alt="原图"></p>]]></content>
    
    <summary type="html">
    
       
    
    </summary>
    
      <category term="计算机" scheme="http://kxjzxc.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="数字图像处理" scheme="http://kxjzxc.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="C++" scheme="http://kxjzxc.github.io/tags/C/"/>
    
      <category term="OpenCV" scheme="http://kxjzxc.github.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理之图像滤波与形态学</title>
    <link href="http://kxjzxc.github.io/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B9%8B%E5%9B%BE%E5%83%8F%E6%BB%A4%E6%B3%A2%E4%B8%8E%E5%BD%A2%E6%80%81%E5%AD%A6.html"/>
    <id>http://kxjzxc.github.io/数字图像处理之图像滤波与形态学.html</id>
    <published>2021-06-25T09:39:45.000Z</published>
    <updated>2021-06-25T10:58:00.229Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>又咕了一个学期，上学期的东西都没写完，惭愧惭愧。</p><h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><ol><li>空域滤波<br>1.1 设计高斯滤波器模板函数<br>1.2 填充图像，将模板函数与图像进行卷积<br>1.3 截取图像，获得滤波后的图像</li><li>腐蚀/膨胀算法<br>2.1 读取图片<br>2.2 腐蚀/膨胀算法<br>2.3 将经过腐蚀或膨胀后的图片显示</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINEAR_X 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">threshold</span><span class="params">(Mat input,Mat &amp;output,<span class="keyword">int</span> var)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rows = output.rows;</span><br><span class="line"><span class="keyword">int</span> cols = output.cols;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p=input.at&lt;uchar&gt;(i,j);</span><br><span class="line"><span class="keyword">if</span>(p&gt;var)</span><br><span class="line">output.at&lt;uchar&gt;(i,j)=<span class="number">255</span>;</span><br><span class="line"><span class="keyword">else</span> output.at&lt;uchar&gt;(i,j)=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//////////////////////滤波//////////////////</span></span><br><span class="line"><span class="comment">// 空域高斯滤波器函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Gaussian</span><span class="params">(Mat input, Mat &amp;output, <span class="keyword">double</span> sigma)</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> weight;<span class="comment">//权重</span></span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">double</span> Gaussian_Temp[SIZE][SIZE] = &#123;<span class="number">0</span>&#125;;<span class="comment">//模板</span></span><br><span class="line">weight = (<span class="number">2</span>*PI*sigma*sigma);  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i &lt;SIZE;i++)  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; SIZE;j++)  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">int</span> x = i - SIZE/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> y = j - SIZE/<span class="number">2</span>;</span><br><span class="line">    Gaussian_Temp[i][j] =<span class="built_in">exp</span>(-(x*x+y*y)/(<span class="number">2.0</span>*sigma*sigma))/weight;  </span><br><span class="line">    sum += Gaussian_Temp[i][j];  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE;i++)  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; SIZE;j++)  </span><br><span class="line">&#123;  </span><br><span class="line">    Gaussian_Temp[i][j] = Gaussian_Temp[i][j]/sum;<span class="comment">//归一化处理</span></span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//卷积</span></span><br><span class="line"><span class="keyword">int</span> rows = output.rows;</span><br><span class="line"><span class="keyword">int</span> cols = output.cols;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;SIZE;k++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;SIZE;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=i+k-SIZE/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> y=j+t-SIZE/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>||y&lt;<span class="number">0</span>||x&gt;=rows||y&gt;=cols)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> p=input.at&lt;uchar&gt;(x,y);</span><br><span class="line">output.at&lt;uchar&gt;(i,j)+=p*Gaussian_Temp[k][t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(output.at&lt;uchar&gt;(i,j)&gt;<span class="number">255</span>)output.at&lt;uchar&gt;(i,j)=<span class="number">255</span>;</span><br><span class="line"><span class="keyword">if</span>(output.at&lt;uchar&gt;(i,j)&lt;<span class="number">0</span>)output.at&lt;uchar&gt;(i,j)=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 膨胀函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dilate</span><span class="params">(Mat Src, Mat Tem, Mat Dst)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rows = Dst.rows;</span><br><span class="line"><span class="keyword">int</span> cols = Dst.cols;</span><br><span class="line"><span class="keyword">int</span> t_rows = Tem.rows;</span><br><span class="line"><span class="keyword">int</span> t_cols = Tem.cols;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p = Src.at&lt;uchar&gt;(i,j);</span><br><span class="line"><span class="keyword">if</span>(p == <span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;t_rows;k++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;t_cols;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=i+k;</span><br><span class="line"><span class="keyword">int</span> y=j+t;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>||y&lt;<span class="number">0</span>||x&gt;=rows||y&gt;=cols)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(Tem.at&lt;uchar&gt;(k,t) == <span class="number">1</span>)</span><br><span class="line">Dst.at&lt;uchar&gt;(x,y)=<span class="number">255</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 腐蚀函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Erode</span><span class="params">(Mat Src, Mat Tem, Mat Dst)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rows = Dst.rows;</span><br><span class="line"><span class="keyword">int</span> cols = Dst.cols;</span><br><span class="line"><span class="keyword">int</span> t_rows = Tem.rows;</span><br><span class="line"><span class="keyword">int</span> t_cols = Tem.cols;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;t_rows;k++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;t_cols;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=i+k-t_rows/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> y=j+t-t_cols/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>||y&lt;<span class="number">0</span>||x&gt;=rows||y&gt;=cols)<span class="keyword">continue</span>;</span><br><span class="line">sum +=Tem.at&lt;uchar&gt;(k,t)*Src.at&lt;uchar&gt;(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum == <span class="number">13</span>*<span class="number">255</span>)Dst.at&lt;uchar&gt;(i,j)=<span class="number">255</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line"><span class="comment">//读取原始图像</span></span><br><span class="line">Mat src=imread(argv[<span class="number">1</span>],IMREAD_UNCHANGED);</span><br><span class="line"><span class="comment">//检查是否读取图像</span></span><br><span class="line"><span class="keyword">if</span>(src.empty())&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Error! Input image cannot be read...\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imshow(<span class="string">"src"</span>,src);</span><br><span class="line">cvtColor(src,src,COLOR_BGR2GRAY);</span><br><span class="line"></span><br><span class="line">Mat dst1=Mat::zeros(src.size(),CV_8UC1);</span><br><span class="line">Mat dst2=Mat::zeros(src.size(),CV_8UC1);</span><br><span class="line">Mat dst3=Mat::zeros(src.size(),CV_8UC1);</span><br><span class="line">Mat Thimg=Mat::zeros(src.size(),CV_8UC1);</span><br><span class="line">threshold(src,Thimg,<span class="number">255</span>/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">Mat dstOut;</span><br><span class="line"><span class="comment">//GaussianBlur(img_out,dstOut,Size(3,3),1,1);</span></span><br><span class="line"><span class="comment">// 空域滤波函数</span></span><br><span class="line">Gaussian(src,dst1,<span class="number">0.8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 膨胀函数</span></span><br><span class="line">uchar matrix1[<span class="number">5</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;, &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;, &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="function">Mat <span class="title">Tem1</span><span class="params">(Size(<span class="number">5</span>,<span class="number">5</span>), CV_8UC1, matrix1)</span></span>;<span class="comment">//注意：opencv里的行列顺序是和maltab相反的</span></span><br><span class="line"><span class="comment">//由于Mat矩阵默认的是uchar类型，所以前后一致，定义矩阵时也要定义uchar类型</span></span><br><span class="line">Dilate(Thimg,Tem1,dst2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 腐蚀函数</span></span><br><span class="line">uchar matrix2[<span class="number">5</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="function">Mat <span class="title">Tem2</span><span class="params">(Size(<span class="number">5</span>,<span class="number">5</span>), CV_8UC1, matrix2)</span></span>;<span class="comment">//注意：opencv里的行列顺序是和maltab相反的</span></span><br><span class="line"><span class="comment">//由于Mat矩阵默认的是uchar类型，所以前后一致，定义矩阵时也要定义uchar类型</span></span><br><span class="line">Erode(Thimg,Tem2,dst3);</span><br><span class="line">imshow(<span class="string">"高斯滤波"</span>,dst1);</span><br><span class="line">imshow(<span class="string">"膨胀"</span>,dst2);</span><br><span class="line">imshow(<span class="string">"腐蚀"</span>,dst3);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Press any key to exit...\n"</span>;</span><br><span class="line">    waitKey(); <span class="comment">// Wait for key press</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="/数字图像处理之图像滤波与形态学/原图.png" alt="原图"><br><img src="/数字图像处理之图像滤波与形态学/高斯滤波.png" alt="原图"><br><img src="/数字图像处理之图像滤波与形态学/膨胀.png" alt="原图"><br><img src="/数字图像处理之图像滤波与形态学/腐蚀.png" alt="原图"></p>]]></content>
    
    <summary type="html">
    
       
    
    </summary>
    
      <category term="计算机" scheme="http://kxjzxc.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="数字图像处理" scheme="http://kxjzxc.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="C++" scheme="http://kxjzxc.github.io/tags/C/"/>
    
      <category term="OpenCV" scheme="http://kxjzxc.github.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理之图像获取与直方图均衡化</title>
    <link href="http://kxjzxc.github.io/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B9%8B%E5%9B%BE%E5%83%8F%E8%8E%B7%E5%8F%96%E4%B8%8E%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%9D%87%E8%A1%A1%E5%8C%96.html"/>
    <id>http://kxjzxc.github.io/数字图像处理之图像获取与直方图均衡化.html</id>
    <published>2021-01-13T07:56:58.000Z</published>
    <updated>2021-06-25T03:48:03.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>咕了一个学期，终于有时间也有东西可写了，虽然只是大三上修的数字图像处理的实验而已。</p><h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><ol><li>统计每个灰度下的像素个数</li><li>绘制出直方图</li><li>计算累计密度</li><li>重新计算均衡化后的灰度值，四舍五入</li><li>直方图均衡化，更新原图每个点的像素值</li></ol><h1 id="直方图均衡化"><a href="#直方图均衡化" class="headerlink" title="直方图均衡化"></a>直方图均衡化</h1><p>直方图均衡化是常用的图像增强处理技术，其原理为：<br>r：原图像灰度级<br>s：均衡化后的图像灰度级<br>$ P_r(w)$：图像灰度概率分布<br>$ P_s(w)$：均衡化后的图像灰度概率分布<br>设直方图均衡化变换函数为<script type="math/tex">s=T(r)</script>，有<script type="math/tex">\int_{rmin}^r{P_r(w)dw}=\int_{smin}^s{P_s(w)dw}=C(r)</script><br>其中C(r)为累计分布函数<br>若期望变换后输出图像的灰度概率密度均匀分布，即<script type="math/tex">P_s(s)=\frac{1}{smax-smin}</script>，则<script type="math/tex">C(r)=\int_{smin}^s{\frac{1}{smax-smin}dw}=\frac{s-smin}{smax-smin}</script><br>所以可得<script type="math/tex">s=[smax-smin]C(r)+smin</script></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p_cnt[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">float</span> p_sum[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">int</span> rows,cols;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawHistogram</span><span class="params">(<span class="built_in">string</span> name,Mat src)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)p_cnt[i]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> maxvalue = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p = src.at&lt;uchar&gt;(i,j);</span><br><span class="line">p_cnt[p]+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p_cnt[p]&gt;maxvalue)&#123;</span><br><span class="line">maxvalue=p_cnt[p];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cv::<span class="function">Mat <span class="title">histogram</span><span class="params">(Size(<span class="number">256</span>,<span class="number">256</span>),CV_8U,Scalar(<span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> h=p_cnt[i]*<span class="number">255</span>/maxvalue;<span class="comment">//归一化</span></span><br><span class="line">line(histogram,Point(i,<span class="number">255</span>),Point(i,<span class="number">255</span>-h),Scalar(<span class="number">255</span>));</span><br><span class="line">&#125;</span><br><span class="line">imshow(name,histogram);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">Mat img_in,img_out;</span><br><span class="line"><span class="comment">//读取原始图像</span></span><br><span class="line">img_in=imread(argv[<span class="number">1</span>],IMREAD_UNCHANGED);</span><br><span class="line"><span class="comment">//检查是否读取图像</span></span><br><span class="line"><span class="keyword">if</span>(img_in.empty())&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Error! Input image cannot be read...\n"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imshow(<span class="string">"src"</span>,img_in);</span><br><span class="line"><span class="comment">//转化为灰度图  </span></span><br><span class="line"><span class="comment">//code</span></span><br><span class="line">cv::Mat grayimg;</span><br><span class="line">cv::cvtColor(img_in,grayimg,CV_BGR2GRAY);</span><br><span class="line">imshow(<span class="string">"均衡化前的图像"</span>,grayimg);</span><br><span class="line">rows = grayimg.rows;</span><br><span class="line">cols = grayimg.cols;</span><br><span class="line"><span class="keyword">int</span> N = cols*rows;</span><br><span class="line"></span><br><span class="line">DrawHistogram(<span class="string">"均衡化前的直方图"</span>,grayimg);</span><br><span class="line"></span><br><span class="line"><span class="comment">//直方图均衡化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">p_sum[i]=<span class="number">1.0</span>*p_cnt[i]/N;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> p_sum[i]=p_sum[i<span class="number">-1</span>]+<span class="number">1.0</span>*p_cnt[i]/N;</span><br><span class="line">s[i] = p_sum[i]*<span class="number">255</span>+<span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新像素灰度值</span></span><br><span class="line">cv::<span class="function">Mat <span class="title">finaimg</span><span class="params">(grayimg)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rows;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cols;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p = grayimg.at&lt;uchar&gt;(i,j);</span><br><span class="line">finaimg.at&lt;uchar&gt;(i,j) = s[p];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">imshow(<span class="string">"均衡化后的图像"</span>,finaimg);</span><br><span class="line"></span><br><span class="line">DrawHistogram(<span class="string">"均衡化后的直方图"</span>,finaimg);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Press any key to exit...\n"</span>;</span><br><span class="line">    waitKey(); <span class="comment">// Wait for key press</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p><img src="/数字图像处理之图像获取与直方图均衡化/原图.png" alt="原图"><br><img src="/数字图像处理之图像获取与直方图均衡化/均衡化前的图像.png" alt="原图"><br><img src="/数字图像处理之图像获取与直方图均衡化/均衡化前的直方图.png" alt="原图"><br><img src="/数字图像处理之图像获取与直方图均衡化/均衡化后的图像.png" alt="原图"><br><img src="/数字图像处理之图像获取与直方图均衡化/均衡化后的直方图.png" alt="原图"></p>]]></content>
    
    <summary type="html">
    
       
    
    </summary>
    
      <category term="计算机" scheme="http://kxjzxc.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="数字图像处理" scheme="http://kxjzxc.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="C++" scheme="http://kxjzxc.github.io/tags/C/"/>
    
      <category term="OpenCV" scheme="http://kxjzxc.github.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>【RPGMakerMV】滑冰谜题</title>
    <link href="http://kxjzxc.github.io/%E3%80%90RPGMakerMV%E3%80%91%E6%BB%91%E5%86%B0%E8%B0%9C%E9%A2%98.html"/>
    <id>http://kxjzxc.github.io/【RPGMakerMV】滑冰谜题.html</id>
    <published>2020-07-30T09:45:21.000Z</published>
    <updated>2020-07-30T10:44:59.610Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>project1论坛上已经有过<a href="https://mp.weixin.qq.com/s?__biz=MzIzMDA3ODg0NA==&amp;mid=501963472&amp;idx=1&amp;sn=d56bf38ff1f95e8b78d8366873fbd128&amp;chksm=70a71ac347d093d58e0479b0e6b3d7e3c4bffc968320597acdfa6b126ce445e7e103af421b7e#rd" target="_blank" rel="noopener">滑冰谜题</a>的教程了，但是这个教程里的滑冰谜题和我想要的不太一样。我想要做的是遇到障碍物才停止的效果，而并非离开冰面停止。<br>网上搜了搜，好像并没有教程，倒是看到有人说可以用YEP_SlipperyTiles插件完成，然而我没搞清楚这个插件的用法。因此最后就自己根据原先的那个教程改进了一下，得到了自己想要的效果。</p><h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><h2 id="地图设置"><a href="#地图设置" class="headerlink" title="地图设置"></a>地图设置</h2><p><img src="/【RPGMakerMV】滑冰谜题/地图设置.png" alt="地图设置"></p><p>区域ID：2个</p><p>1：踩到就进入滑冰状态，向当前朝向前进一步。覆盖冰面。</p><p>2: 踩到就离开滑冰状态，恢复正常。放置于冰面出口</p><p>注意点：冰面四周要铺满无法通行的障碍物，因为$gamePlayer.isMapPassable()无法判定地图边界。</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p><strong>变量：3个</strong></p><p>001 X (玩家地图坐标X)</p><p>002 Y (玩家地图坐标Y)</p><p>003 RegionID</p><p><strong>开关：1个</strong></p><p>001 滑冰</p><p><strong>公共事件：1个</strong></p><p>001 滑冰</p><p><img src="/【RPGMakerMV】滑冰谜题/公共事件1.png" alt="公共事件"><br><img src="/【RPGMakerMV】滑冰谜题/公共事件2.png" alt="公共事件"></p><p><strong>地图事件</strong></p><p>同样我们也要在地图里放一个并行事件调用滑冰公共事件</p>]]></content>
    
    <summary type="html">
    
       
    
    </summary>
    
      <category term="游戏" scheme="http://kxjzxc.github.io/categories/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="RPGMaker" scheme="http://kxjzxc.github.io/categories/%E6%B8%B8%E6%88%8F/RPGMaker/"/>
    
    
      <category term="RPGMaker" scheme="http://kxjzxc.github.io/tags/RPGMaker/"/>
    
      <category term="游戏" scheme="http://kxjzxc.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="教程" scheme="http://kxjzxc.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>HackingLab之脚本关攻略</title>
    <link href="http://kxjzxc.github.io/HackingLab%E4%B9%8B%E8%84%9A%E6%9C%AC%E5%85%B3%E6%94%BB%E7%95%A5.html"/>
    <id>http://kxjzxc.github.io/HackingLab之脚本关攻略.html</id>
    <published>2020-04-16T02:04:00.000Z</published>
    <updated>2020-08-12T04:34:41.203Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>开始脚本关的攻略！！<br>本次依旧无题目描述。<br><a herf="http://hackinglab.cn/">网络信息安全攻防学习平台</a></p><h1 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h1><p>这题不是跟基础关的第八题一样吗？使用的python代码也只用改一下url，key就直接出来了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = &quot;http://lab1.xseclab.com/xss1_30ac8668cd453e7e387c76b132b140bb/search_key.php&quot;</span><br><span class="line">r = requests.get(url,allow_redirects=False)</span><br><span class="line"># 请求获取URL位置的资源，包含从服务器返回的所有内容</span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line">r.encoding = &apos;utf-8&apos;</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><blockquote><p>yougotit_script_now</p></blockquote><h1 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h1><p>第二关需要在两秒内计算式子并提交，但很显然两秒的时间就算能算出来也不够输入。<br>所以我们需要写一个脚本能够计算这个式子并且提交答案。</p><p>我们通过re模块，使用正则表达式提取算数表达式。由于他的式子只有a*b+c*(d+e)的形式，所以我们的正则表达式只需匹配这种表达式，即(\d+[+*])+((\d+)+(\d+))。</p><p>另外需要注意的一点是，由于每次访问的时候式子都会改变，所以我们需要保持会话，让我们获取式子和提交答案访问的是同一个会话。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">url = &quot;http://lab1.xseclab.com/xss2_0d557e6d2a4ac08b749b61473a075be1/index.php&quot;</span><br><span class="line"></span><br><span class="line">#维持会话,可以让我们在跨请求时保存某些参数</span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line"># 请求获取URL位置的资源，包含从服务器返回的所有内容</span><br><span class="line">r = session.get(url);</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">r&apos;&apos;一般用在正则表达式中，称为原始字符串，作用是将Python语法中的反斜杠转义给取消，将其设置成为一个普通的字符串。</span><br><span class="line">可以解决Python中的转义字符和正则表达式中的转义字符之间的冲突问题。</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">expression = re.search(r&apos;(\d+[+*])+\((\d+)\+(\d+)\)&apos;,r.text).group()</span><br><span class="line"></span><br><span class="line"># eval() 函数用来执行一个字符串表达式，并返回表达式的值。</span><br><span class="line">result = eval(expression)</span><br><span class="line"></span><br><span class="line">print(expression)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">r = session.post(url,data=&#123;&apos;v&apos;:result&#125;);</span><br><span class="line"># 请求获取URL位置的资源，包含从服务器返回的所有内容</span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line">r.encoding = &apos;utf-8&apos;</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><blockquote><p>123iohHKHJ%^&amp;*(jkh</p></blockquote><h1 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h1><p>第三关的关键字就是空。<br>我一开始想难道是要求我们直接提交空信息？什么都不填点提交却弹出“请输入答案”的窗口。于是我将判断空信息的js代码删去，却发现并没有什么效果。<br>最后查了答案，才发现需要填null。</p><blockquote><p>null</p></blockquote><h1 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h1><p>查看源码，发现head中有一大堆js代码<br><img src="HackingLab之脚本关攻略/第四关.png" alt="F12"><br>显然第一个函数<code>function alert(a)</code>导致a函数无法执行。将网页保存到本地，然后删去此函数再次打开即可。</p><p>不过要注意’chars’不算在14个字符当中<br><img src="HackingLab之脚本关攻略/第四关输出.png" alt="弹出窗口的代码"></p><blockquote><p>slakfjteslkjsd</p></blockquote><h1 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h1>]]></content>
    
    <summary type="html">
    
       
    
    </summary>
    
      <category term="计算机" scheme="http://kxjzxc.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Hack" scheme="http://kxjzxc.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Hack/"/>
    
    
      <category term="Hack" scheme="http://kxjzxc.github.io/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>关于u盘运行veket系统这件事</title>
    <link href="http://kxjzxc.github.io/%E5%85%B3%E4%BA%8Eu%E7%9B%98%E8%BF%90%E8%A1%8Cveket%E7%B3%BB%E7%BB%9F%E8%BF%99%E4%BB%B6%E4%BA%8B.html"/>
    <id>http://kxjzxc.github.io/关于u盘运行veket系统这件事.html</id>
    <published>2020-04-15T04:07:01.000Z</published>
    <updated>2020-04-15T15:14:20.941Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上网冲浪时，我偶然了解到可以装在u盘里随身携带的轻量级操作系统。想到家里有一台硬盘损坏无法安装操作系统的老笔记本电脑，我琢磨着能否通过这类操作系统让这台老家伙摆脱被贱卖的命运。</p><h1 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h1><ul><li><strong>轻量级Linux系统veket</strong><br>veket是一个容量很小，资源要求很低，同时集成了大部分常用软件的操作系统。更重要的是，该系统的图形界面接近于windows，长辈容易操作。</li><li><strong>YUMI MulitbootUSB</strong><br>其实只要一种讲iso镜像文件写入u盘的工具就好了，常用的软碟通就行。我选择这个工具主要是因为我本来想搞多重引导的u盘。</li><li><strong>8G的U盘</strong><br>一个不小于4G的U盘就够用了，毕竟veket才500M左右。</li><li><strong>一台老电脑</strong><br>最好还是内存不小于2G吧（1G似乎也行？）。</li></ul><h1 id="使用过程"><a href="#使用过程" class="headerlink" title="使用过程"></a>使用过程</h1><p>其实安装过程也没甚好写的，毕竟这玩意比普通安装系统还要简单，我就随便水水流程好了。</p><ol><li>通过YUMI工具将veket的iso镜像文件写入U盘。由于使用的工具可能不大一样，所以我就不写具体操作了。</li><li>进入老电脑的BIOS界面，将电脑设置成优先USB方式启动。不同电脑的设置方式不同，不过网上一般都有教程。</li><li>将U盘插入老电脑，再次开机，进入启动界面。一般来说全选择第一个选项就好，除非使用者有其他用途。</li><li>如此便可以使用了。不过veket系统需要注意的是第一次关机时，系统会询问你是否保存数据。如果使用者没有保存数据的需求（比如只是为了体验），那么选择不保存即可。如果先要保存数据，也只需要安装提示一步一步来（以后就不用了）。</li></ol><p>若有什么地方不太明白，可以到<a href="http://www.lucky8k.com/forum.php" target="_blank" rel="noopener">veket的论坛</a>上逛一逛。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>挺水的一篇教程，主要目的也只是记录一下使用的工具。<br>以前发现笔记本的硬盘损坏后，我也想过直接使用Ubuntu启动盘里的试用系统，然而连个视频都看不了就放弃了。如今使用veket系统后，虽然长时间使用的话电脑还是会卡死（硬伤，莫得办法），但是好歹平时用得还是挺流畅的。<br>其实我本来是在纠结到底选择CDLinux还是veket的，后来想着全都要算了，结果发现CDLinux不知道为何写入不了U盘，只能作罢。所以我的多引导系统U盘并没能完成，着实感到遗憾。</p>]]></content>
    
    <summary type="html">
    
       
    
    </summary>
    
      <category term="教程" scheme="http://kxjzxc.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="http://kxjzxc.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Linux" scheme="http://kxjzxc.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>HackingLab之基础关攻略</title>
    <link href="http://kxjzxc.github.io/HackingLab%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%85%B3%E6%94%BB%E7%95%A5.html"/>
    <id>http://kxjzxc.github.io/HackingLab之基础关攻略.html</id>
    <published>2020-04-07T09:58:05.000Z</published>
    <updated>2020-04-08T03:40:19.638Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为一无所知的小白，我仅仅是将此作为摸鱼时的一种解谜游戏看待，因此不会事先去恶补过多的知识，遇到盲点也会果断放弃，上网查攻略，毕竟乐趣作为重要。</p><p>每一关的解法并不唯一，可以用抓包工具，也可以只用python，我的想法是能写多少写多少方法。题目什么的我也懒得复制粘贴了，毕竟没有意义。</p><p><a herf="http://hackinglab.cn/">攻防平台</a></p><h1 id="闯关"><a href="#闯关" class="headerlink" title="闯关"></a>闯关</h1><h2 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h2><p>讲道理，看到题目就想到查看源代码。直接F12，答案写在注释里。</p><blockquote><p>jflsjklejflkdsjfklds</p></blockquote><h2 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h2><p>密文再加密一次又变回明文，既然全是小写字母，就很容易想到与13位后的对应字母替换。查询可知这种加密算法叫做Rot13。</p><blockquote><p>23ksdjfkfds</p></blockquote><h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><p>大致看一下密文，发现最后一位是特殊字符“=”，搜索一下与等号有关的加密算法，查到base64算法。在线解密，最终可以得到key。</p><blockquote><p>jkljdkl232jkljkdl2389</p></blockquote><h2 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h2><p>既然题目都说了MD5，何不一试？</p><blockquote><p>bighp</p></blockquote><h2 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h2><p>小白没什么思路，搜索关键字无果，于是看攻略。修改请求头中的Accept-Language参数。<br>这意思就是根据语言判断是否是外国人呗……<br><strong>方法一：</strong><br>直接修改浏览器的语言，把中文删去。<br><strong>方法二：</strong><br>用python的request库伪造请求头的Accept-Language参数，然后访问网址，并打印响应内容。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://lab1.xseclab.com/base1_0ef337f3afbe42d5619d7a36c19c20ab/index.php"</span></span><br><span class="line">headers = &#123;<span class="string">'Accept-Language'</span>: <span class="string">'q=0.5,en-US;q=0.3,en;q=0.2'</span>&#125;<span class="comment">#伪造请求头参数</span></span><br><span class="line">r = requests.get(url,headers=headers)<span class="comment"># 请求获取URL位置的资源，包含从服务器返回的所有内容</span></span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line">r.encoding = <span class="string">'utf-8'</span></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><blockquote><p><em>(TU687jksf6&amp;</em></p></blockquote><h2 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h2><p>搜索引擎搜索关键字，发现似乎与“User-Agent”这个属性有关。F12到Network观察请求头，找到该属性，后面参数可以明显看出和浏览器相关，或许修改此处即可。<br><strong>方法一（以Chrome为准）：</strong><br>F12打开开发者工具，点击右上方三个点，点击<code>More Tools</code>-&gt;<code>Network conditions</code>，直接修改User-Agent的值。<br><strong>方法二：</strong><br>用python的request库伪造请求头的User-Agent参数，然后访问网址，并打印响应内容。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://lab1.xseclab.com/base6_6082c908819e105c378eb93b6631c4d3/index.php"</span></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'HAHA'</span>&#125;</span><br><span class="line">r = requests.get(url,headers=headers)</span><br><span class="line"><span class="comment"># 请求获取URL位置的资源，包含从服务器返回的所有内容</span></span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line">r.encoding = <span class="string">'utf-8'</span></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><blockquote><p>meiyouHAHAliulanqi</p></blockquote><h2 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h2><p>没什么想法，看攻略说是藏在响应头里。<br><strong>方法一：</strong><br>F12到开发者工具查看Network里的响应头，就看到答案了。<br><strong>方法二：</strong><br>用python的request库申请资源，打印响应头。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://lab1.xseclab.com/base7_eb68bd2f0d762faf70c89799b3c1cc52/index.php"</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line"><span class="comment"># 请求获取URL位置的资源，包含从服务器返回的所有内容</span></span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line">r.encoding = <span class="string">'utf-8'</span></span><br><span class="line">print(r.headers)</span><br></pre></td></tr></table></figure></p><blockquote><p>kjh%#$#%FDjjj</p></blockquote><h2 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h2><p>将鼠标放在超链接“_到这里找key__”上时，发现左下角显示链接与点击链接后的网址不同，可知发生了重定向。<br>搜索浏览器如何阻止重定向，方法无效。<br>搜索python的request库访问如何阻止重定向，找到解决方法，只需再get函数中添加属性<code>allow_redirects=False</code>即可。注意申请的链接是超链接显示的链接。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://lab1.xseclab.com/base8_0abd63aa54bef0464289d6a42465f354/search_key.php"</span></span><br><span class="line">r = requests.get(url,allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 请求获取URL位置的资源，包含从服务器返回的所有内容</span></span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line">r.encoding = <span class="string">'utf-8'</span></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p><img src="./HackingLab之基础关攻略/第八关.png" alt="响应内容"><br>可以得到一个网址<a herf="http://lab1.xseclab.com/base8_0abd63aa54bef0464289d6a42465f354/key_is_here_now_.php">./key_is_here_now_.php</a></p><blockquote><p>ohHTTP302dd</p></blockquote><h2 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h2><p>搜索关键字，发现登录信息与cookie有关，并且发现测试网址使用了一个名为“Login”的cookie。<br>F12到Network查看请求头，发现参数<code>Cookie:Login=0</code>,于是尝试用python的request库伪造请求头的Cookie参数，使Login=1，然后访问网址，并打印响应内容，得到答案。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://lab1.xseclab.com/base9_ab629d778e3a29540dfd60f2e548a5eb/index.php"</span></span><br><span class="line">headers = &#123;<span class="string">'Cookie'</span>:<span class="string">'Login=1'</span>&#125;</span><br><span class="line">r = requests.get(url,headers=headers)</span><br><span class="line"><span class="comment">#r = requests.post(url,data=&#123;'v':'111111'&#125;)</span></span><br><span class="line"><span class="comment"># 请求获取URL位置的资源，包含从服务器返回的所有内容</span></span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line">r.encoding = <span class="string">'utf-8'</span></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><blockquote><p>yescookieedit7823789KJ</p></blockquote><h2 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h2><p>发现只能输入3位数字，而999依旧显示太小。<br>F12查看源代码，发现标签属性中限制了输入长度。<br><strong>方法一</strong><br>直接F12在开发者工具里修改源代码，使之能够输入一个极大的数，直接得出答案。<br><strong>方法二</strong><br>用python提交不受标签限制<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://lab1.xseclab.com/base10_0b4e4866096913ac9c3a2272dde27215/index.php"</span></span><br><span class="line">r = requests.post(url,data=&#123;<span class="string">'v'</span>:<span class="string">'111111'</span>&#125;)</span><br><span class="line"><span class="comment"># 请求获取URL位置的资源，包含从服务器返回的所有内容</span></span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line">r.encoding = <span class="string">'utf-8'</span></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><blockquote><p>768HKyu678567&amp;*&amp;K</p></blockquote><h2 id="第十一关"><a href="#第十一关" class="headerlink" title="第十一关"></a>第十一关</h2><p>题目崩了，答案就直接放在源代码注释里了。</p><blockquote><p>^&amp;*(UIHKJjkadshf</p></blockquote><h2 id="第十二关"><a href="#第十二关" class="headerlink" title="第十二关"></a>第十二关</h2><p>没有思路，上网查攻略，发现与robots协议有关，虽然不知道是怎么想到的……</p><blockquote><p>robots协议也叫robots.txt（统一小写）是一种存放于网站根目录下的ASCII编码的文本文件，它通常告诉网络搜索引擎的漫游器（又称网络蜘蛛），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。</p></blockquote><p>既然如此，就直接访问<a href="http://lab1.xseclab.com/base12_44f0d8a96eed21afdc4823a0bf1a316b/robots.txt" target="_blank" rel="noopener">./robots.txt</a>,看到<code>Disallow: /9fb97531fe95594603aff7e794ab2f5f/</code>。<br>于是访问<a href="http://lab1.xseclab.com/base12_44f0d8a96eed21afdc4823a0bf1a316b/9fb97531fe95594603aff7e794ab2f5f/" target="_blank" rel="noopener">该网址</a>,得到提示说此页面不是登陆页面，继续搜索。<br>一般来说登录页面就是在网址后面加<code>/login.php</code>，尝试，成功看到答案。</p><blockquote><p>UIJ%%IOOqweqwsdf</p></blockquote><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>至此，基础十二关便结束了。<br>虽然总是在上网查攻略，但依旧乐趣不减，毕竟都是我没接触过的东西。<br>感觉学到了不少东西，作为娱乐方式，还是很赚的。<br>以后可能补上抓包工具的解法。</p>]]></content>
    
    <summary type="html">
    
       
    
    </summary>
    
      <category term="计算机" scheme="http://kxjzxc.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="Hack" scheme="http://kxjzxc.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/Hack/"/>
    
    
      <category term="Hack" scheme="http://kxjzxc.github.io/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kxjzxc.github.io/%E7%94%A8%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6%E5%9B%BE%E6%A0%87%E7%A7%BB%E5%8A%A8/keyScrollico.html"/>
    <id>http://kxjzxc.github.io/用键盘控制图标移动/keyScrollico.html</id>
    <published>2020-04-07T03:31:09.523Z</published>
    <updated>2019-05-22T14:09:56.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>@charset "utf-8";body{background:#CCC;}div{width:60px;height:60px;background:brown;position:absolute;/*属性允许向元素添加圆角*/border-radius:30px;}]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kxjzxc.github.io/%E7%94%A8%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6%E5%9B%BE%E6%A0%87%E7%A7%BB%E5%8A%A8/keyScrollico.html"/>
    <id>http://kxjzxc.github.io/用键盘控制图标移动/keyScrollico.html</id>
    <published>2020-04-07T03:31:09.523Z</published>
    <updated>2019-05-22T14:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.8.0"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>键盘控制图标</title><link rel="stylesheet" href="keyScrollball.css"><script src="keyScrollball.js"></script></head><body><div id="box"></div></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kxjzxc.github.io/%E7%94%A8%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6%E5%9B%BE%E6%A0%87%E7%A7%BB%E5%8A%A8/keyScrollico.html"/>
    <id>http://kxjzxc.github.io/用键盘控制图标移动/keyScrollico.html</id>
    <published>2020-04-07T03:31:09.523Z</published>
    <updated>2019-05-22T15:10:08.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>window.onload=function(){var box=document.getElementById("box");//网页可见区域宽，兼容各种浏览器var MapWidth=document.body.clientWidth||document.documentElement.clientWidth;//网页可见区域高，兼容各种浏览器var MapHeight=document.body.clientHeight||document.documentElement.clientHeight;var timer=null;document.onkeydown=function(ev){var ev=ev||window.event;clearInterval(timer);timer=setInterval(function(){switch(ev.keyCode){case 37: if(box.offsetLeft>0){box.style.left=box.offsetLeft-10+"px";}break;case 38:if(box.offsetTop>0){box.style.top=box.offsetTop-10+"px";}break;case 39:if(box.offsetLeft]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kxjzxc.github.io/%E5%9F%BA%E4%BA%8Ejs%E7%9A%84%E5%9B%BE%E6%A0%87%E7%A7%BB%E5%8A%A8%E4%BB%A3%E7%A0%81/moveLoad.html"/>
    <id>http://kxjzxc.github.io/基于js的图标移动代码/moveLoad.html</id>
    <published>2020-04-07T03:31:09.454Z</published>
    <updated>2019-05-17T15:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.8.0"><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"><title>图标移动</title><script src="moveLoad.js"></script><!--<link rel="stylesheet" hrel="moveLoad.css"/>--><style>*{       margin: 0;padding: 0;}div{position: absolute;width: 30px;height: 45px; background: url("./images/V.ico") no-repeat center center;background-size: 76px 55px;top:100px;left:50px;}p,input{margin: 10px;}</style></head><body><input type="button" value="根据鼠标点击位置移动"><input type="button" value="根据标鼠标轨迹移动"><p>请点击按钮激活功能！</p><div></div></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kxjzxc.github.io/%E5%9F%BA%E4%BA%8Ejs%E7%9A%84%E5%9B%BE%E6%A0%87%E7%A7%BB%E5%8A%A8%E4%BB%A3%E7%A0%81/moveLoad.html"/>
    <id>http://kxjzxc.github.io/基于js的图标移动代码/moveLoad.html</id>
    <published>2020-04-07T03:31:09.454Z</published>
    <updated>2019-05-17T15:55:18.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>window.onload=function(){//图标var oDiv=document.getElementsByTagName("div")[0];var aInput=document.getElementsByTagName("input");var oP=document.getElementsByTagName("p")[0];//移动到鼠标点击的位置aInput[0].onclick=function(event){//清空事件clearEvent();this.value +="(已激活)";oP.innerHTML="鼠标点击页面，图标将移动至鼠标位置！"//鼠标点击document.onclick=function(event){var event=event||window.event;//开始移动clearInterval(oDiv.timer);oDiv.timer=setInterval(function (){                var X=(event.clientX-oDiv.offsetLeft)/5;                var Y=(event.clientY-oDiv.offsetTop)/5;                //ceil()向上取整，floor()向下取整                X=X>0?Math.ceil(X):Math.floor(X);                Y=Y>0?Math.ceil(Y):Math.floor(Y);               if(event.clientX==oDiv.offsetLeft&&event.clientY==oDiv.offsetTop){                        clearInterval(oDiv.timer);                }                else {                        oDiv.style.left=oDiv.offsetLeft+X+"px";                        oDiv.style.top=oDiv.offsetTop+Y+"px";                }        },30);return false;}};        //图标跟随鼠标移动轨迹移动aInput[1].onclick=function(event){clearEvent();this.value+="(已激活)";oP.innerHTML = "按住鼠标左键，在页面划动，图标将按照鼠标轨迹移动。" //鼠标的位置var aPos=[{x:oDiv.offsetLeft,y:oDiv.offsetTop}];//鼠标按下document.onmousedown=function(event){var event=event||window.event;//记录当前图标的位置aPos.push({x:event.clientX,y:event.clientY});document.onmousemove=function(event){var event=event||window.event;//记录路上鼠标的位置aPos.push({x:event.clientX,y:event.clientY});return false;}return false;}document.onmouseup=function(event){//初始化鼠标移动的事件document.onmousemove=null;//setInterval(code,time)可按照指定的周期（以毫秒计）来调用函数或计算表达式。var timer=setInterval(function(){//如果没有坐标需要移动了，停止周期函数if(aPos.length==0){clearInterval(timer);return;}//设置图标位置oDiv.style.left=aPos[0].x+"px";oDiv.style.top=aPos[0].y+"px";//弹出数组中的元素aPos.shift();},30);}}//清空事件function clearEvent(){document.onclick=null;document.onmousedown=null;document.onmousemove=null;document.onmouseup=null;for(var i=0;i]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kxjzxc.github.io/%E5%9F%BA%E4%BA%8Ecanvas%E7%9A%84%E9%BC%A0%E6%A0%87%E7%94%BB%E5%9B%BE%E5%8A%9F%E8%83%BD/mouseDraw.html"/>
    <id>http://kxjzxc.github.io/基于canvas的鼠标画图功能/mouseDraw.html</id>
    <published>2020-04-07T03:31:09.438Z</published>
    <updated>2019-04-08T15:32:44.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>window.onload=function(){ //获取<canvas>元素 var can=document.getElementById("can"); //创建画布对象 var con=can.getContext("2d"); //获取按键元素，此处是通过标签名得到的变量，是数组变量 var inp=document.getElementsByTagName("input"); //清空画布.canvas每当高度或宽度被重设时，画布内容就会被清空,（此方法仅限需要清除全部内容的情况） inp[0].onclick=function(){  can.width=can.width; } //当用户按下鼠标按钮执行Javascript代码 can.onmousedown=function(ev){  //兼容各个浏览器。  //在FireFox浏览器中，事件绑定的函数要获取到事件本身，需要从函数中传入，而IE等浏览器则可以直接使用event或者window.event得到事件本身。  var ev=ev||event;  /* moveTo:定义一个起点    client系列:可视区域    clientX： 相对文档的水平坐标    clientY： 相对文档的垂直坐标    offsetLeft： 对象相对于版面或由 offsetParent 左侧位置    offsetTop：对象相对于版面或由 offsetTop 顶端位置  *///document.write(ev.clientX-can.offsetLeft);  con.moveTo(ev.clientX-can.offsetLeft,ev.clientY-can.offsetTop);  //当鼠标指针移动到图像上时执行一段Javascript代码  document.onmousemove=function(ev){   var ev=ev||event;   //lineTo() 方法添加一个新点，然后创建从该点到画布中最后指定点的线条（该方法并不会创建线条）。   con.lineTo(ev.clientX-can.offsetLeft,ev.clientY-can.offsetTop);   //stroke() 方法会实际地绘制出通过 moveTo() 和 lineTo() 方法定义的路径。默认颜色是黑色。   con.stroke();  }  //当鼠标释放时执行一段Javascript代码  document.onmouseup=function(){   //鼠标释放后这些事件不再触发函数   document.onmousedown=document.onmousemove=null;  } }}</canvas>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kxjzxc.github.io/%E5%9F%BA%E4%BA%8Ecanvas%E7%9A%84%E9%BC%A0%E6%A0%87%E7%94%BB%E5%9B%BE%E5%8A%9F%E8%83%BD/mouseDraw.html"/>
    <id>http://kxjzxc.github.io/基于canvas的鼠标画图功能/mouseDraw.html</id>
    <published>2020-04-07T03:31:09.423Z</published>
    <updated>2019-04-08T15:08:32.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>/*允许中文字符*/@charset "utf-8";body{ background: #CCC; text-align: center;}#button{ margin: 50px auto; width: 200px;}#can{ background: white; margin-top: -50px; display: inline-block;}]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
</feed>
